[1mdiff --git a/backend/prisma/schema.prisma b/backend/prisma/schema.prisma[m
[1mindex 4bc075d4d..79c58c3c0 100644[m
[1m--- a/backend/prisma/schema.prisma[m
[1m+++ b/backend/prisma/schema.prisma[m
[36m@@ -1394,6 +1394,8 @@[m [mmodel Indicador {[m
     complemento           String?[m
     casas_decimais        Int?          @db.SmallInt[m
 [m
[32m+[m[32m    variavel_categoria_id Int?[m
[32m+[m
     ha_avisos_data_fim Boolean @default(false)[m
 [m
     recalculando    Boolean  @default(false)[m
[1mdiff --git a/backend/src/indicador/dto/update-indicador.dto.ts b/backend/src/indicador/dto/update-indicador.dto.ts[m
[1mindex 91a0ad11e..7a8aba345 100644[m
[1m--- a/backend/src/indicador/dto/update-indicador.dto.ts[m
[1m+++ b/backend/src/indicador/dto/update-indicador.dto.ts[m
[36m@@ -137,4 +137,10 @@[m [mexport class UpdateIndicadorDto extends OmitType(PartialType(CreateIndicadorDto)[m
     @IsOptional()[m
     @Type(() => String)[m
     acumulado_valor_base?: number | null;[m
[32m+[m
[32m+[m[32m    @IsOptional()[m
[32m+[m[32m    @IsInt({ message: 'variavel_categoria_id precisa ser um n√∫mero ou null' })[m
[32m+[m[32m    @Type(() => Number)[m
[32m+[m[32m    @ValidateIf((object, value) => value !== null)[m
[32m+[m[32m    variavel_categoria_id?: number | null;[m
 }[m
[1mdiff --git a/backend/src/indicador/indicador.service.ts b/backend/src/indicador/indicador.service.ts[m
[1mindex 802d5ed48..2db634d82 100644[m
[1m--- a/backend/src/indicador/indicador.service.ts[m
[1m+++ b/backend/src/indicador/indicador.service.ts[m
[36m@@ -368,7 +368,7 @@[m [mexport class IndicadorService {[m
                         400[m
                     );[m
                 }[m
[31m-            }else{[m
[32m+[m[32m            } else {[m
                 throw new HttpException([m
                     `formula_variaveis| Referencia de f√≥rmula composta @_${formulaCompostaId} enviada na formula n√£o pode ser usada em F√≥rmula Composta (Plano Setorial)`,[m
                     400[m
[36m@@ -536,6 +536,29 @@[m [mexport class IndicadorService {[m
 [m
         await this.prisma.$transaction([m
             async (prismaTx: Prisma.TransactionClient): Promise<RecordWithId> => {[m
[32m+[m[32m                if (dto.variavel_categoria_id !== undefined) {[m
[32m+[m[32m                    if (!dto.formula || !dto.formula_variaveis)[m
[32m+[m[32m                        throw new HttpException([m
[32m+[m[32m                            'Para alterar a categoria da vari√°vel √© necess√°rio enviar a formula e as vari√°veis',[m
[32m+[m[32m                            400[m
[32m+[m[32m                        );[m
[32m+[m
[32m+[m[32m                    if (dto.variavel_categoria_id == null) {[m
[32m+[m[32m                        if (dto.formula_variaveis.length > 0)[m
[32m+[m[32m                            throw new HttpException('Nenhuma vari√°vel √© permitida para a categoria vazia', 400);[m
[32m+[m[32m                        if (dto.formula.indexOf('$') !== -1)[m
[32m+[m[32m                            throw new HttpException('A formula n√£o pode ter refer√™ncias de vari√°veis', 400);[m
[32m+[m[32m                    } else {[m
[32m+[m[32m                        if (dto.formula_variaveis.length > 1)[m
[32m+[m[32m                            throw new HttpException('Apenas uma vari√°vel √© permitida para a categoria', 400);[m
[32m+[m[32m                        if (dto.formula_variaveis[0].variavel_id !== dto.variavel_categoria_id)[m
[32m+[m[32m                            throw new HttpException('A vari√°vel da categoria deve ser a mesma da formula', 400);[m
[32m+[m[32m                        const referencia = dto.formula_variaveis[0].referencia;[m
[32m+[m[32m                        if (dto.formula.indexOf(referencia) === -1)[m
[32m+[m[32m                            throw new HttpException('A refer√™ncia da vari√°vel da categoria deve estar na formula', 400);[m
[32m+[m[32m                    }[m
[32m+[m[32m                }[m
[32m+[m
                 const indicador = await prismaTx.indicador.update({[m
                     where: { id: id },[m
                     data: {[m
[36m@@ -608,13 +631,18 @@[m [mexport class IndicadorService {[m
                         });[m
                 }[m
                 //Tratamento para series inv√°lidas[m
[31m-                if (tipo === 'PDM'){[m
[31m-                    const variaveis = await prismaTx.indicadorVariavel[m
[31m-                        .findMany({ where:{ indicador_id: indicador.id,[m
[31m-                            indicador_origem_id : null,} });[m
[32m+[m[32m                if (tipo === 'PDM') {[m
[32m+[m[32m                    const variaveis = await prismaTx.indicadorVariavel.findMany({[m
[32m+[m[32m                        where: { indicador_id: indicador.id, indicador_origem_id: null },[m
[32m+[m[32m                    });[m
                     for (const variavel of variaveis) {[m
[31m-                        await this.variavelService.trataPeriodosSerieVariavel(prismaTx, variavel.variavel_id,indicador.id,[m
[31m-                            indicador.inicio_medicao,indicador.fim_medicao);[m
[32m+[m[32m                        await this.variavelService.trataPeriodosSerieVariavel([m
[32m+[m[32m                            prismaTx,[m
[32m+[m[32m                            variavel.variavel_id,[m
[32m+[m[32m                            indicador.id,[m
[32m+[m[32m                            indicador.inicio_medicao,[m
[32m+[m[32m                            indicador.fim_medicao[m
[32m+[m[32m                        );[m
                     }[m
                 }[m
                 return indicador;[m
