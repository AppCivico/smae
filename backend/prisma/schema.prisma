generator client {
    provider        = "prisma-client-js"
    previewFeatures = []
    binaryTargets   = ["native", "debian-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Pessoa {
    id                  Int                 @id @default(autoincrement())
    email               String              @unique
    senha               String
    nome_exibicao       String
    nome_completo       String
    atualizado_em       DateTime            @default(now()) @db.Timestamptz(6)
    atualizado_por      Int?
    criado_em           DateTime            @default(now()) @db.Timestamptz(6)
    criado_por          Int?
    qtde_senha_invalida Int                 @default(0)
    senha_atualizada_em DateTime?           @default(now()) @db.Timestamptz(6)
    senha_bloqueada     Boolean             @default(false)
    senha_bloqueada_em  DateTime?           @default(now()) @db.Timestamptz(6)
    desativado          Boolean             @default(false)
    desativado_em       DateTime?
    desativado_por      Int?
    desativado_motivo   String?
    pessoa_fisica_id    Int?
    atualizador         Pessoa?             @relation("AtualizadorPessoas", fields: [atualizado_por], references: [id])
    criador             Pessoa?             @relation("CriadorPessoas", fields: [criado_por], references: [id])
    desativador         Pessoa?             @relation("DesativadorPessoas", fields: [desativado_por], references: [id])
    pessoa_fisica       PessoaFisica?       @relation(fields: [pessoa_fisica_id], references: [id])
    PessoasQueAtualizei Pessoa[]            @relation("AtualizadorPessoas")
    PessoasQueCriei     Pessoa[]            @relation("CriadorPessoas")
    PessoasQueDesativei Pessoa[]            @relation("DesativadorPessoas")
    PessoaPerfil        PessoaPerfil[]
    PessoaSessoesAtivas PessoaSessaoAtiva[]

    OrgaoQueCriei     Orgao[] @relation("Criador")
    OrgaoQueRemovi    Orgao[] @relation("Removedor")
    OrgaoQueAtualizei Orgao[] @relation("Atualizador")

    TipoOrgaoQueCriei     TipoOrgao[] @relation("Criador")
    TipoOrgaoQueRemovi    TipoOrgao[] @relation("Removedor")
    TipoOrgaoQueAtualizei TipoOrgao[] @relation("Atualizador")

    OdsQueCriei     Ods[] @relation("Criador")
    OdsQueRemovi    Ods[] @relation("Removedor")
    OdsQueAtualizei Ods[] @relation("Atualizador")

    SubTemaQueCriei     SubTema[] @relation("Criador")
    SubTemaQueRemovi    SubTema[] @relation("Removedor")
    SubTemaQueAtualizei SubTema[] @relation("Atualizador")

    processoSeiQueCriei     ProjetoRegistroSei[] @relation("Criador")
    processoSeiQueRemovi    ProjetoRegistroSei[] @relation("Removedor")
    processoSeiQueAtualizei ProjetoRegistroSei[] @relation("Atualizador")

    EixoQueCriei     MacroTema[] @relation("Criador")
    EixoQueRemovi    MacroTema[] @relation("Removedor")
    EixoQueAtualizei MacroTema[] @relation("Atualizador")

    PDMQueCriei     Pdm[] @relation("Criador")
    PDMQueDesativei Pdm[] @relation("Desativador")
    PDMQueAtualizei Pdm[] @relation("Atualizador")

    OEQueCriei     Tema[] @relation("Criador")
    OEQueDesativei Tema[] @relation("Removedor")
    OEQueAtualizei Tema[] @relation("Atualizador")

    TagQueCriei     Tag[] @relation("Criador")
    TagQueDesativei Tag[] @relation("Removedor")
    TagQueAtualizei Tag[] @relation("Atualizador")

    FRQueCriei     FonteRecurso[] @relation("Criador")
    FRQueDesativei FonteRecurso[] @relation("Removedor")
    FRQueAtualizei FonteRecurso[] @relation("Atualizador")

    TipoDocQueCriei     TipoDocumento[] @relation("Criador")
    TipoDocQueDesativei TipoDocumento[] @relation("Removedor")
    TipoDocQueAtualizei TipoDocumento[] @relation("Atualizador")

    RegiaoQueCriei     Regiao[] @relation("Criador")
    RegiaoQueDesativei Regiao[] @relation("Removedor")
    RegiaoQueAtualizei Regiao[] @relation("Atualizador")

    ArquivoQueCriei Arquivo[] @relation("Criador")

    ArquivoDocQueCriei     ArquivoDocumento[] @relation("Criador")
    ArquivoDocQueDesativei ArquivoDocumento[] @relation("Removedor")
    ArquivoDocQueAtualizei ArquivoDocumento[] @relation("Atualizador")

    PPArquivoDocQueCriei     ProjetoDocumento[] @relation("Criador")
    PPArquivoDocQueDesativei ProjetoDocumento[] @relation("Removedor")
    PPArquivoDocQueAtualizei ProjetoDocumento[] @relation("Atualizador")

    MetaQueCriei     Meta[] @relation("Criador")
    MetaQueDesativei Meta[] @relation("Desativador")
    MetaQueAtualizei Meta[] @relation("Atualizador")

    MetasQueSouResp MetaResponsavel[] @relation("MetaPessoaResp")

    IndicadorQueCriei     Indicador[] @relation("Criador")
    IndicadorQueRemovi    Indicador[] @relation("Removedor")
    IndicadorQueAtualizei Indicador[] @relation("Atualizador")

    UnidadeQueCriei     UnidadeMedida[]     @relation("Criador")
    UnidadeQueRemovi    UnidadeMedida[]     @relation("Removedor")
    UnidadeQueAtualizei UnidadeMedida[]     @relation("Atualizador")
    IndicadorVariavel   IndicadorVariavel[] @relation("Desativador")

    IniciativasQueCriei     Iniciativa[]            @relation("Criador")
    IniciativasQueRemovi    Iniciativa[]            @relation("Removedor")
    IniciativasQueAtualizei Iniciativa[]            @relation("Atualizador")
    IniciativasQueSouResp   IniciativaResponsavel[] @relation("IniciativaPessoaResp")

    AtividadesQueCriei     Atividade[]            @relation("Criador")
    AtividadesQueRemovi    Atividade[]            @relation("Removedor")
    AtividadesQueAtualizei Atividade[]            @relation("Atualizador")
    AtividadesQueSouResp   AtividadeResponsavel[] @relation("AtividadePessoaResp")

    VariavelResponsavel    VariavelResponsavel[]
    AtualizouSerieVariavel SerieVariavel[]       @relation("Atualizador")
    ConferiuSerieVariavel  SerieVariavel[]       @relation("Conferidor")

    CronogramaOrgao         CronogramaOrgao[]
    CronogramasQueCriei     Cronograma[]      @relation("Criador")
    CronogramasQueRemovi    Cronograma[]      @relation("Removedor")
    CronogramasQueAtualizei Cronograma[]      @relation("Atualizador")

    PortfolioQueCriei     Portfolio[] @relation("Criador")
    PortfolioQueRemovi    Portfolio[] @relation("Removedor")
    PortfolioQueAtualizei Portfolio[] @relation("Atualizador")

    EtapasQueCriei     Etapa[] @relation("Criador")
    EtapasQueRemovi    Etapa[] @relation("Removedor")
    EtapasQueAtualizei Etapa[] @relation("Atualizador")

    PlanoAcaoMonitoramentoQueCriei     PlanoAcaoMonitoramento[] @relation("Criador")
    PlanoAcaoMonitoramentoQueAtualizei PlanoAcaoMonitoramento[] @relation("Atualizador")
    PlanoAcaoMonitoramentoQueRemovi    PlanoAcaoMonitoramento[] @relation("Removedor")

    PaineisQueCriei     Painel[]          @relation("Criador")
    PaineisQueRemovi    Painel[]          @relation("Removedor")
    PaineisQueAtualizei Painel[]          @relation("Atualizador")
    PessoaAcessoPdm     PessoaAcessoPdm[]

    GruposDePaineisQueCriei                 GrupoPainel[]                    @relation("Criador")
    GruposDePaineisQueRemovi                GrupoPainel[]                    @relation("Removedor")
    GruposDePaineisQueParticipo             PessoaGrupoPainel[]
    VariavelCicloFisicoQualitativoCriador   VariavelCicloFisicoQualitativo[] @relation("criador")
    VariavelCicloFisicoQualitativoRemovedor VariavelCicloFisicoQualitativo[] @relation("removedor")
    VariavelCicloFisicoDocumentoCriador     VariavelCicloFisicoDocumento[]   @relation("criador")
    VariavelCicloFisicoDocumentoRemovedor   VariavelCicloFisicoDocumento[]   @relation("removedor")
    PedidoComplementacaoCriador             PedidoComplementacao[]           @relation("criador")
    PedidoComplementacaoAtendeu             PedidoComplementacao[]           @relation("atendeu")
    PedidoComplementacaoRemovedor           PedidoComplementacao[]           @relation("removedor")
    MetaCicloFisicoAnaliseCriador           MetaCicloFisicoAnalise[]         @relation("criador")
    MetaCicloFisicoAnaliseRemovedor         MetaCicloFisicoAnalise[]         @relation("removedor")
    MetaCicloFisicoFechamentoCriador        MetaCicloFisicoFechamento[]      @relation("criador")
    MetaCicloFisicoFechamentoRemovedor      MetaCicloFisicoFechamento[]      @relation("removedor")

    MetaCicloFisicoRiscoCriador              MetaCicloFisicoRisco[]            @relation("criador")
    MetaCicloFisicoRiscoRemovedor            MetaCicloFisicoRisco[]            @relation("removedor")
    MetaCicloFisicoAnaliseDocumentoCriador   MetaCicloFisicoAnaliseDocumento[] @relation("criador")
    MetaCicloFisicoAnaliseDocumentoRemovedor MetaCicloFisicoAnaliseDocumento[] @relation("removedor")
    EtapaResponsavel                         EtapaResponsavel[]
    MetaOrcamentoCriados                     OrcamentoPrevisto[]               @relation("criador")
    MetaOrcamentoRemovidos                   OrcamentoPrevisto[]               @relation("removedor")
    MetaOrcamentoAtualizados                 OrcamentoPrevisto[]               @relation("atualizador")
    OrcamentoPlanejadoCriados                OrcamentoPlanejado[]              @relation("criador")
    OrcamentoPlanejadoRemovidos              OrcamentoPlanejado[]              @relation("removedor")
    OrcamentoRealizadoCriados                OrcamentoRealizado[]              @relation("criador")
    OrcamentoRealizadoRemovidos              OrcamentoRealizado[]              @relation("removedor")
    OrcamentoRealizadoItem                   OrcamentoRealizadoItem[]          @relation("sobrescritor")
    RelatorioQueFiz                          Relatorio[]                       @relation("criador")
    RelatorioQueRemovi                       Relatorio[]                       @relation("removedor")

    ProjetoLicoesAprendidasQCriei  ProjetoLicaoAprendida[] @relation("criador")
    ProjetoLicoesAprendidasQRemovi ProjetoLicaoAprendida[] @relation("removedor")

    ppResponsavel     Projeto[] @relation("ppResponsavel")
    ppQueCriei        Projeto[] @relation("criador")
    ppSelecionado     Projeto[] @relation("ppSelecionado")
    ppEm_planejamento Projeto[] @relation("ppEm_planejamento")
    ppArquivado       Projeto[] @relation("ppArquivado")
    ppSuspenso        Projeto[] @relation("ppSuspenso")
    ppRestaurou       Projeto[] @relation("ppRestaurou")
    ppValidado        Projeto[] @relation("ppValidado")
    ppFinalizouPlan   Projeto[] @relation("ppFinalizouPlan")
    ppCancelou        Projeto[] @relation("ppCancelou")
    ppReiniciou       Projeto[] @relation("ppReiniciou")
    ppIniciou         Projeto[] @relation("ppIniciou")
    ppTerminou        Projeto[] @relation("ppTerminou")

    RiscosQueCriei  ProjetoRisco[] @relation("Criador")
    RiscosQueRemovi ProjetoRisco[] @relation("Removedor")
    RiscosQueEditei ProjetoRisco[] @relation("Atualizador")

    PlanosDeAcaoQueCriei  PlanoAcao[] @relation("Criador")
    PlanosDeAcaoQueRemovi PlanoAcao[] @relation("Removedor")
    PlanosDeAcaoQueEditei PlanoAcao[] @relation("Atualizador")

    OrcamentoPrevistoZeradoQCriei  OrcamentoPrevistoZerado[] @relation("Criador")
    OrcamentoPrevistoZeradoQRemovi OrcamentoPrevistoZerado[] @relation("Removedor")
    ImportacaoLog                  ImportacaoOrcamento[]

    @@index([email])
    @@map("pessoa")
}

model Modulo {
    id         Int          @id @default(autoincrement())
    codigo     String       @unique
    descricao  String
    privilegio Privilegio[]

    @@map("modulo")
}

model Orgao {
    id            Int            @id @default(autoincrement())
    sigla         String         @default("-")
    descricao     String
    tipo_orgao_id Int
    tipo_orgao    TipoOrgao      @relation(fields: [tipo_orgao_id], references: [id])
    pessoa_fisica PessoaFisica[]

    criado_por     Int?
    criado_em      DateTime  @default(now()) @db.Timestamptz(6)
    atualizado_por Int?
    atualizado_em  DateTime  @default(now()) @db.Timestamptz(6)
    removido_por   Int?
    removido_em    DateTime? @db.Timestamptz(6)

    atualizador            Pessoa?                    @relation("Atualizador", fields: [atualizado_por], references: [id])
    criador                Pessoa?                    @relation("Criador", fields: [criado_por], references: [id])
    removedor              Pessoa?                    @relation("Removedor", fields: [removido_por], references: [id])
    meta_orgao             MetaOrgao[]
    meta_responsavel       MetaResponsavel[]
    Variavel               Variavel[]
    iniciativa_orgao       IniciativaOrgao[]
    iniciativa_responsavel IniciativaResponsavel[]
    atividade_orgao        AtividadeOrgao[]
    atividade_responsavel  AtividadeResponsavel[]
    CronogramaOrgao        CronogramaOrgao[]
    tarefas                Tarefa[]
    PlanoAcao              PlanoAcao[]
    projetos_participando  ProjetoOrgaoParticipante[]
    projetos_geridos       Projeto[]                  @relation("orgao_gestor")

    PortifolioOrgao   PortfolioOrgao[]
    orgao_responsavel Projeto[]        @relation("orgao_responsavel")

    @@map("orgao")
}

model PerfilAcesso {
    id                Int                @id @default(autoincrement())
    nome              String
    descricao         String?
    perfil_privilegio PerfilPrivilegio[]
    pessoa_perfil     PessoaPerfil[]

    @@map("perfil_acesso")
}

model PerfilPrivilegio {
    id               Int          @id @default(autoincrement())
    perfil_acesso_id Int
    privilegio_id    Int
    perfil_acesso    PerfilAcesso @relation(fields: [perfil_acesso_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    privilegio       Privilegio   @relation(fields: [privilegio_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@unique([perfil_acesso_id, privilegio_id])
    @@map("perfil_privilegio")
}

model PessoaFisica {
    id Int @id @default(autoincrement())

    cargo                String?
    lotacao              String?
    orgao_id             Int
    orgao                Orgao    @relation(fields: [orgao_id], references: [id])
    pessoa               Pessoa[]
    registro_funcionario String?
    cpf                  String?

    @@map("pessoa_fisica")
}

model PessoaPerfil {
    id               Int          @id @default(autoincrement())
    pessoa_id        Int
    perfil_acesso_id Int
    perfil_acesso    PerfilAcesso @relation(fields: [perfil_acesso_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    pessoa           Pessoa       @relation(fields: [pessoa_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@index([pessoa_id])
    @@map("pessoa_perfil")
}

model PessoaSessaoAtiva {
    id        Int    @id @default(autoincrement())
    pessoa_id Int
    pessoa    Pessoa @relation(fields: [pessoa_id], references: [id])

    @@map("pessoa_sessao_ativa")
}

model Privilegio {
    id                Int                @id @default(autoincrement())
    nome              String
    codigo            String             @unique
    modulo_id         Int
    modulo            Modulo             @relation(fields: [modulo_id], references: [id])
    perfil_privilegio PerfilPrivilegio[]

    @@map("privilegio")
}

model TipoOrgao {
    id        Int     @id @default(autoincrement())
    descricao String
    orgao     Orgao[]

    criado_por     Int?
    criado_em      DateTime  @default(now()) @db.Timestamptz(6)
    atualizado_por Int?
    atualizado_em  DateTime  @default(now()) @db.Timestamptz(6)
    removido_por   Int?
    removido_em    DateTime? @db.Timestamptz(6)

    atualizador Pessoa? @relation("Atualizador", fields: [atualizado_por], references: [id])
    criador     Pessoa? @relation("Criador", fields: [criado_por], references: [id])
    removedor   Pessoa? @relation("Removedor", fields: [removido_por], references: [id])

    @@map("tipo_orgao")
}

model EmaildbConfig {
    id                       Int                     @id @default(autoincrement())
    from                     String
    template_resolver_class  String                  @db.VarChar(60)
    template_resolver_config Json                    @default("{}") @db.Json
    email_transporter_class  String                  @db.VarChar(60)
    email_transporter_config Json                    @default("{}") @db.Json
    delete_after             Unsupported("interval") @default(dbgenerated("'10 years'::interval"))
    EmaildbQueue             EmaildbQueue[]

    @@map("emaildb_config")
}

model EmaildbQueue {
    id             String        @id @db.Uuid
    config_id      Int
    created_at     DateTime      @default(now()) @db.Timestamp(6)
    template       String
    to             String
    subject        String
    variables      Json          @db.Json
    sent           Boolean?
    updated_at     DateTime?     @db.Timestamp(6)
    visible_after  DateTime?     @db.Timestamp(6)
    errmsg         String?
    emaildb_config EmaildbConfig @relation(fields: [config_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@map("emaildb_queue")
}

model Ods {
    id Int @id @default(autoincrement())

    numero    Int
    titulo    String
    descricao String

    eh_status_pdm Boolean @default(false)

    criado_por     Int?
    criado_em      DateTime  @default(now()) @db.Timestamptz(6)
    atualizado_por Int?
    atualizado_em  DateTime  @default(now()) @db.Timestamptz(6)
    removido_por   Int?
    removido_em    DateTime? @db.Timestamptz(6)

    atualizador Pessoa? @relation("Atualizador", fields: [atualizado_por], references: [id])
    criador     Pessoa? @relation("Criador", fields: [criado_por], references: [id])
    removedor   Pessoa? @relation("Removedor", fields: [removido_por], references: [id])
    Tag         Tag[]

    @@map("ods")
}

model Pdm {
    id Int @id @default(autoincrement())

    nome                                  String
    descricao                             String?
    data_inicio                           DateTime? @db.Date()
    data_fim                              DateTime? @db.Date()
    data_publicacao                       DateTime? @db.Date()
    periodo_do_ciclo_participativo_inicio DateTime? @db.Date()
    periodo_do_ciclo_participativo_fim    DateTime? @db.Date()
    ativo                                 Boolean   @default(false)

    prefeito       String
    equipe_tecnica String?

    possui_macro_tema          Boolean @default(true)
    possui_tema                Boolean @default(true)
    possui_sub_tema            Boolean @default(true)
    possui_contexto_meta       Boolean @default(true)
    possui_complementacao_meta Boolean @default(true)
    possui_iniciativa          Boolean @default(false)
    possui_atividade           Boolean @default(false)

    rotulo_macro_tema          String @default("Macro Tema")
    rotulo_tema                String @default("Tema")
    rotulo_sub_tema            String @default("Sub Tema")
    rotulo_contexto_meta       String @default("Contexto")
    rotulo_complementacao_meta String @default("Complementação")
    rotulo_iniciativa          String @default("Iniciativa")
    rotulo_atividade           String @default("Atividade")

    nivel_orcamento NivelOrcamento @default(Meta)

    criado_por     Int?
    criado_em      DateTime  @default(now()) @db.Timestamptz(6)
    atualizado_por Int?
    atualizado_em  DateTime  @default(now()) @db.Timestamptz(6)
    desativado_por Int?
    desativado_em  DateTime? @db.Timestamptz(6)

    atualizador         Pessoa?            @relation("Atualizador", fields: [atualizado_por], references: [id])
    criador             Pessoa?            @relation("Criador", fields: [criado_por], references: [id])
    desativador         Pessoa?            @relation("Desativador", fields: [desativado_por], references: [id])
    Eixo                MacroTema[]
    Tag                 Tag[]
    ObjetivoEstrategico Tema[]
    ArquivoDocumento    ArquivoDocumento[]
    SubTema             SubTema[]
    Meta                Meta[]

    paineis_de_meta Painel[]

    logo                   String?
    arquivo_logo_id        Int?
    ArquivoLogo            Arquivo?                 @relation(fields: [arquivo_logo_id], references: [id])
    CicloFasesPdmConfig    CicloFasesPdmConfig[]
    CicloFisico            CicloFisico[]
    PdmOrcamentoConfig     PdmOrcamentoConfig[]
    Relatorio              Relatorio[]
    PdmDotacaoPlanejado    PdmDotacaoPlanejado[]
    PdmDotacaoRealizado    PdmDotacaoRealizado[]
    PdmDotacaoProcesso     PdmDotacaoProcesso[]
    PdmDotacaoProcessoNota PdmDotacaoProcessoNota[]
    ImportacaoLog          ImportacaoOrcamento[]

    @@index([ativo])
    @@map("pdm")
}

model MacroTema {
    id Int @id @default(autoincrement())

    descricao String

    pdm_id Int
    pdm    Pdm @relation(fields: [pdm_id], references: [id])

    criado_por     Int?
    criado_em      DateTime  @default(now()) @db.Timestamptz(6)
    atualizado_por Int?
    atualizado_em  DateTime  @default(now()) @db.Timestamptz(6)
    removido_por   Int?
    removido_em    DateTime? @db.Timestamptz(6)

    atualizador Pessoa? @relation("Atualizador", fields: [atualizado_por], references: [id])
    criador     Pessoa? @relation("Criador", fields: [criado_por], references: [id])
    removedor   Pessoa? @relation("Removedor", fields: [removido_por], references: [id])
    Meta        Meta[]

    @@map("eixo")
}

model SubTema {
    id Int @id @default(autoincrement())

    descricao String

    pdm_id Int
    pdm    Pdm @relation(fields: [pdm_id], references: [id])

    criado_por     Int?
    criado_em      DateTime  @default(now()) @db.Timestamptz(6)
    atualizado_por Int?
    atualizado_em  DateTime  @default(now()) @db.Timestamptz(6)
    removido_por   Int?
    removido_em    DateTime? @db.Timestamptz(6)

    atualizador Pessoa? @relation("Atualizador", fields: [atualizado_por], references: [id])
    criador     Pessoa? @relation("Criador", fields: [criado_por], references: [id])
    removedor   Pessoa? @relation("Removedor", fields: [removido_por], references: [id])
    Meta        Meta[]

    @@map("subtema")
}

model FonteRecurso {
    // deprecated, precisamos remover os endpoints futuramente
    id    Int     @id @default(autoincrement())
    fonte String
    sigla String?

    criado_por     Int?
    criado_em      DateTime  @default(now()) @db.Timestamptz(6)
    atualizado_por Int?
    atualizado_em  DateTime  @default(now()) @db.Timestamptz(6)
    removido_por   Int?
    removido_em    DateTime? @db.Timestamptz(6)

    atualizador Pessoa? @relation("Atualizador", fields: [atualizado_por], references: [id])
    criador     Pessoa? @relation("Criador", fields: [criado_por], references: [id])
    removedor   Pessoa? @relation("Removedor", fields: [removido_por], references: [id])

    @@map("fonte_recurso")
}

model TipoDocumento {
    id        Int     @id @default(autoincrement())
    codigo    String
    titulo    String
    descricao String?
    extensoes String?

    criado_por     Int?
    criado_em      DateTime  @default(now()) @db.Timestamptz(6)
    atualizado_por Int?
    atualizado_em  DateTime  @default(now()) @db.Timestamptz(6)
    removido_por   Int?
    removido_em    DateTime? @db.Timestamptz(6)

    atualizador Pessoa?   @relation("Atualizador", fields: [atualizado_por], references: [id])
    criador     Pessoa?   @relation("Criador", fields: [criado_por], references: [id])
    removedor   Pessoa?   @relation("Removedor", fields: [removido_por], references: [id])
    Arquivo     Arquivo[]

    @@map("tipo_documento")
}

model Tag {
    id Int @id @default(autoincrement())

    descricao String
    icone     String?

    arquivo_icone_id Int?
    ArquivoIcone     Arquivo? @relation(fields: [arquivo_icone_id], references: [id])

    pdm_id Int
    pdm    Pdm @relation(fields: [pdm_id], references: [id])

    ods_id Int?
    ods    Ods? @relation(fields: [ods_id], references: [id])

    criado_por     Int?
    criado_em      DateTime  @default(now()) @db.Timestamptz(6)
    atualizado_por Int?
    atualizado_em  DateTime  @default(now()) @db.Timestamptz(6)
    removido_por   Int?
    removido_em    DateTime? @db.Timestamptz(6)

    atualizador Pessoa? @relation("Atualizador", fields: [atualizado_por], references: [id])
    criador     Pessoa? @relation("Criador", fields: [criado_por], references: [id])
    removedor   Pessoa? @relation("Removedor", fields: [removido_por], references: [id])

    meta_tag       MetaTag[]
    iniciativa_tag IniciativaTag[]
    atividade_tag  AtividadeTag[]

    @@index([pdm_id])
    @@map("tag")
}

model Tema {
    id Int @id @default(autoincrement())

    descricao String

    pdm_id Int
    pdm    Pdm @relation(fields: [pdm_id], references: [id])

    criado_por     Int?
    criado_em      DateTime  @default(now()) @db.Timestamptz(6)
    atualizado_por Int?
    atualizado_em  DateTime  @default(now()) @db.Timestamptz(6)
    removido_por   Int?
    removido_em    DateTime? @db.Timestamptz(6)

    atualizador Pessoa? @relation("Atualizador", fields: [atualizado_por], references: [id])
    criador     Pessoa? @relation("Criador", fields: [criado_por], references: [id])
    removedor   Pessoa? @relation("Removedor", fields: [removido_por], references: [id])
    Meta        Meta[]

    @@index([pdm_id])
    @@map("objetivo_estrategico")
}

model Regiao {
    id Int @id @default(autoincrement())

    descricao  String
    shapefile  String?
    nivel      Int
    codigo     Int?
    parente_id Int?

    arquivo_shapefile_id Int?
    ArquivoShapefile     Arquivo? @relation(fields: [arquivo_shapefile_id], references: [id])

    RegiaoAcima Regiao? @relation("Parente", fields: [parente_id], references: [id])

    criado_por     Int?
    criado_em      DateTime  @default(now()) @db.Timestamptz(6)
    atualizado_por Int?
    atualizado_em  DateTime  @default(now()) @db.Timestamptz(6)
    removido_por   Int?
    removido_em    DateTime? @db.Timestamptz(6)

    atualizador   Pessoa?    @relation("Atualizador", fields: [atualizado_por], references: [id])
    criador       Pessoa?    @relation("Criador", fields: [criado_por], references: [id])
    removedor     Pessoa?    @relation("Removedor", fields: [removido_por], references: [id])
    RegioesAbaixo Regiao[]   @relation("Parente")
    Variavel      Variavel[]
    Etapa         Etapa[]

    @@index([parente_id])
    @@map("regiao")
}

model Arquivo {
    id   Int    @id @default(autoincrement())
    tipo String

    criador                         Pessoa?                           @relation("Criador", fields: [criado_por], references: [id])
    criado_por                      Int?
    criado_em                       DateTime                          @default(now()) @db.Timestamptz(6)
    caminho                         String
    nome_original                   String
    mime_type                       String?
    tamanho_bytes                   Int
    descricao                       String?
    tipo_documento_id               Int?
    TipoDocumento                   TipoDocumento?                    @relation(fields: [tipo_documento_id], references: [id])
    Tag                             Tag[]
    Regiao                          Regiao[]
    ArquivoDocumento                ArquivoDocumento[]
    Pdm                             Pdm[]
    VariavelCicloFisicoDocumento    VariavelCicloFisicoDocumento[]
    MetaCicloFisicoAnaliseDocumento MetaCicloFisicoAnaliseDocumento[]
    Relatorio                       Relatorio[]
    projeto_documentos              ProjetoDocumento[]

    ImportacaoLogInput  ImportacaoOrcamento[] @relation("input")
    ImportacaoLogOutput ImportacaoOrcamento[] @relation("output")

    @@map("arquivo")
}

model ArquivoDocumento {
    id Int @id @default(autoincrement())

    arquivo_id Int
    arquivo    Arquivo @relation(fields: [arquivo_id], references: [id])

    pdm_id Int?
    pdm    Pdm? @relation(fields: [pdm_id], references: [id])

    criado_por     Int?
    criado_em      DateTime  @default(now()) @db.Timestamptz(6)
    atualizado_por Int?
    atualizado_em  DateTime  @default(now()) @db.Timestamptz(6)
    removido_por   Int?
    removido_em    DateTime? @db.Timestamptz(6)

    atualizador Pessoa? @relation("Atualizador", fields: [atualizado_por], references: [id])
    criador     Pessoa? @relation("Criador", fields: [criado_por], references: [id])
    removedor   Pessoa? @relation("Removedor", fields: [removido_por], references: [id])

    @@index([arquivo_id])
    @@index([pdm_id])
    @@map("arquivo_documento")
}

model Meta {
    id Int @id @default(autoincrement())

    pdm_id Int
    pdm    Pdm @relation(fields: [pdm_id], references: [id])

    status      String
    codigo      String
    titulo      String
    contexto    String?
    complemento String?

    macro_tema_id Int?
    macro_tema    MacroTema? @relation(fields: [macro_tema_id], references: [id])
    tema_id       Int?
    tema          Tema?      @relation(fields: [tema_id], references: [id])
    sub_tema_id   Int?
    sub_tema      SubTema?   @relation(fields: [sub_tema_id], references: [id])

    ativo Boolean @default(false)

    criado_por     Int?
    criado_em      DateTime  @default(now()) @db.Timestamptz(6)
    atualizado_por Int?
    atualizado_em  DateTime  @default(now()) @db.Timestamptz(6)
    removido_por   Int?
    removido_em    DateTime? @db.Timestamptz(6)

    ciclo_fisico_id Int?
    ciclo_fisico    CicloFisico? @relation(fields: [ciclo_fisico_id], references: [id])

    ciclo_fase_id Int?
    ciclo_fase    CicloFisicoFase? @relation(fields: [ciclo_fase_id], references: [id])

    atualizador      Pessoa?           @relation("Atualizador", fields: [atualizado_por], references: [id])
    criador          Pessoa?           @relation("Criador", fields: [criado_por], references: [id])
    reovedor         Pessoa?           @relation("Desativador", fields: [removido_por], references: [id])
    meta_orgao       MetaOrgao[]
    meta_responsavel MetaResponsavel[]
    indicador        Indicador[]
    iniciativa       Iniciativa[]
    meta_tag         MetaTag[]

    cronograma                      Cronograma[]
    painel_conteudo                 PainelConteudo[]
    StatusMetaCicloFisico           StatusMetaCicloFisico[]
    StatusVariavelCicloFisico       StatusVariavelCicloFisico[]
    VariavelCicloFisicoQualitativo  VariavelCicloFisicoQualitativo[]
    VariavelCicloFisicoDocumento    VariavelCicloFisicoDocumento[]
    MetaCicloFisicoAnalise          MetaCicloFisicoAnalise[]
    MetaCicloFisicoAnaliseDocumento MetaCicloFisicoAnaliseDocumento[]
    MetaCicloFisicoRisco            MetaCicloFisicoRisco[]
    MetaCicloFisicoFechamento       MetaCicloFisicoFechamento[]
    MetaOrcamento                   OrcamentoPrevisto[]
    OrcamentoPlanejado              OrcamentoPlanejado[]
    OrcamentoRealizado              OrcamentoRealizado[]
    projetos                        Projeto[]
    OrcamentoPlanejadoZerado        OrcamentoPrevistoZerado[]

    @@index([pdm_id])
    @@map("meta")
}

model MetaTag {
    id      Int  @id @default(autoincrement())
    meta_id Int
    meta    Meta @relation(fields: [meta_id], references: [id])
    tag_id  Int
    tag     Tag  @relation(fields: [tag_id], references: [id])

    @@index([meta_id])
    @@index([tag_id])
    @@map("meta_tag")
}

model MetaOrgao {
    id Int @id @default(autoincrement())

    meta_id     Int
    meta        Meta    @relation(fields: [meta_id], references: [id])
    responsavel Boolean
    orgao_id    Int
    orgao       Orgao   @relation(fields: [orgao_id], references: [id])

    @@index([orgao_id])
    @@index([meta_id])
    @@map("meta_orgao")
}

model MetaResponsavel {
    id Int @id @default(autoincrement())

    meta_id   Int
    meta      Meta   @relation(fields: [meta_id], references: [id])
    pessoa_id Int
    pessoa    Pessoa @relation("MetaPessoaResp", fields: [pessoa_id], references: [id])
    orgao_id  Int
    orgao     Orgao  @relation(fields: [orgao_id], references: [id])

    // TODO: arrumar o nome desta coluna, palavra 'coordenador'.
    coordenador_responsavel_cp Boolean // @map("coorderandor_responsavel_cp")

    @@index([pessoa_id])
    @@index([meta_id])
    @@map("meta_responsavel")
}

enum Polaridade {
    Neutra
    Positiva
    Negativa
}

enum NivelOrcamento {
    Meta
    Iniciativa
    Atividade
}

enum Periodicidade {
    Mensal
    Bimestral
    Trimestral
    Quadrimestral
    Semestral
    Anual
    Quinquenal
    Secular
}

model Indicador {
    id                    Int           @id @default(autoincrement())
    meta_id               Int?
    meta                  Meta?         @relation(fields: [meta_id], references: [id])
    iniciativa_id         Int?
    iniciativa            Iniciativa?   @relation(fields: [iniciativa_id], references: [id])
    atividade_id          Int?
    atividade             Atividade?    @relation(fields: [atividade_id], references: [id])
    formula               String?
    formula_compilada     String?
    acumulado_valor_base  Decimal?      @default(0) @db.Decimal(65, 30)
    acumulado_usa_formula Boolean       @default(false)
    codigo                String
    titulo                String
    periodicidade         Periodicidade
    polaridade            Polaridade    @default(Neutra)
    regionalizavel        Boolean       @default(false)
    nivel_regionalizacao  Int?
    inicio_medicao        DateTime      @db.Date()
    fim_medicao           DateTime      @db.Date()
    criado_por            Int?
    criado_em             DateTime      @default(now()) @db.Timestamptz(6)
    atualizado_por        Int?
    atualizado_em         DateTime      @default(now()) @db.Timestamptz(6)
    removido_por          Int?
    removido_em           DateTime?     @db.Timestamptz(6)
    contexto              String?
    complemento           String?
    casas_decimais        Int?          @db.SmallInt

    atualizador             Pessoa?                    @relation("Atualizador", fields: [atualizado_por], references: [id])
    criador                 Pessoa?                    @relation("Criador", fields: [criado_por], references: [id])
    removedor               Pessoa?                    @relation("Removedor", fields: [removido_por], references: [id])
    IndicadorVariavelOrigem IndicadorVariavel[]        @relation("Origem")
    IndicadorVariavel       IndicadorVariavel[]        @relation("FK")
    SerieIndicador          SerieIndicador[]
    formula_variaveis       IndicadorFormulaVariavel[]
    painel_conteudo         PainelConteudo[]

    @@index([meta_id])
    @@index([iniciativa_id])
    @@index([atividade_id])
    @@map("indicador")
}

model IndicadorFormulaVariavel {
    id                   Int       @id @default(autoincrement())
    referencia           String
    indicador_id         Int
    indicador            Indicador @relation(fields: [indicador_id], references: [id])
    variavel_id          Int
    variavel             Variavel  @relation(fields: [variavel_id], references: [id])
    janela               Int
    usar_serie_acumulada Boolean   @default(false)

    @@unique([indicador_id, referencia])
    @@map("indicador_formula_variavel")
}

enum Serie {
    Previsto
    PrevistoAcumulado
    Realizado
    RealizadoAcumulado
}

model UnidadeMedida {
    id        Int        @id @default(autoincrement())
    sigla     String
    descricao String
    Variavel  Variavel[]

    criado_por     Int?
    criado_em      DateTime  @default(now()) @db.Timestamptz(6)
    atualizado_por Int?
    atualizado_em  DateTime  @default(now()) @db.Timestamptz(6)
    removido_por   Int?
    removido_em    DateTime? @db.Timestamptz(6)

    atualizador Pessoa? @relation("Atualizador", fields: [atualizado_por], references: [id])
    criador     Pessoa? @relation("Criador", fields: [criado_por], references: [id])
    removedor   Pessoa? @relation("Removedor", fields: [removido_por], references: [id])

    @@map("unidade_medida")
}

model VariavelResponsavel {
    id Int @id @default(autoincrement())

    variavel_id Int
    pessoa_id   Int

    pessoa   Pessoa   @relation(fields: [pessoa_id], references: [id])
    variavel Variavel @relation(fields: [variavel_id], references: [id])

    @@index([pessoa_id])
    @@index([variavel_id])
    @@map("variavel_responsavel")
}

model Variavel {
    id                Int           @id @default(autoincrement())
    orgao_id          Int
    orgao             Orgao         @relation(fields: [orgao_id], references: [id])
    regiao_id         Int?
    //a regiao por agora, o usuario precisa criar cada uma das variaveis manualmente
    regiao            Regiao?       @relation(fields: [regiao_id], references: [id])
    titulo            String
    // qual é o valor que o valor base se refere
    ano_base          Int?
    valor_base        Decimal       @db.Decimal(65, 30) // onde o grafico começa
    periodicidade     Periodicidade
    unidade_medida_id Int
    unidade_medida    UnidadeMedida @relation(fields: [unidade_medida_id], references: [id])

    codigo String

    // ficam null quando a Periodicidade é a mesma do indicador
    // quando for diferente, é necessário preencher para saber qual é o mês de base
    inicio_medicao DateTime? @db.Date()
    fim_medicao    DateTime? @db.Date()

    casas_decimais             Int                         @default(0) @db.SmallInt
    // usar para calculcar as agregações, por exemplo na média ponderada
    // acho que pode ser um valor e não uma porcentagem, e ai o sistema calcula a porcentagem sozinho
    // de acordo com o numero de variaveis
    acumulativa                Boolean                     @default(false)
    // quando true, o sistema vai calcular automaticamente a serie acumulativa
    // quando false, o usuario precisa preencher, mas sempre via ter as 4 series, correto?
    serie_variavel             SerieVariavel[]
    variavel_responsavel       VariavelResponsavel[]
    indicador_variavel         IndicadorVariavel[]
    indicador_formula_variavel IndicadorFormulaVariavel[]
    PainelConteudoDetalhe      PainelConteudoDetalhe[]
    StatusVariavelCicloFisico  StatusVariavelCicloFisico[]

    // quanto tempo leva para o preenchimento da variavel
    // geralmente é 1, ou seja, numa variavel mensal, no ciclo de novembro, se preenche os valores de outubro
    atraso_meses                   Int                              @default(1) @db.Integer
    VariavelCicloFisicoQualitativo VariavelCicloFisicoQualitativo[]
    VariavelCicloFisicoDocumento   VariavelCicloFisicoDocumento[]
    PedidoComplementacao           PedidoComplementacao[]

    removido_por Int?
    removido_em  DateTime? @db.Timestamptz(6)

    @@index([regiao_id])
    @@map("variavel")
}

// cria relacionamento com um indicador (ou iniciativa que ainda nao existe) com a variavel

model IndicadorVariavel {
    id Int @id @default(autoincrement())

    indicador_id Int
    indicador    Indicador @relation("FK", fields: [indicador_id], references: [id])

    variavel_id Int
    variavel    Variavel @relation(fields: [variavel_id], references: [id])

    indicador_origem_id Int?
    indicador_origem    Indicador? @relation("Origem", fields: [indicador_origem_id], references: [id])

    desativado     Boolean   @default(false)
    desativado_em  DateTime?
    desativado_por Int?
    desativador    Pessoa?   @relation("Desativador", fields: [desativado_por], references: [id])

    @@index([variavel_id], map: "idx_indicador_variavel_variavel")
    @@index([indicador_id], map: "idx_indicador_variavel_indicador")
    @@map("indicador_variavel")
}

// valores calculados pelo sistema, deixar vazio por enquanto Lucas
model SerieIndicador {
    id           Int       @id @default(autoincrement())
    indicador_id Int
    indicador    Indicador @relation(fields: [indicador_id], references: [id])

    serie Serie

    data_valor              DateTime @db.Date()
    valor_nominal           Float    @db.DoublePrecision
    ha_conferencia_pendente Boolean  @default(false)

    @@index([serie, indicador_id, data_valor], map: "idx_serie_indicador_indicador_id_data_valor")
    @@index([indicador_id, data_valor], map: "idx_indicador_indicador_id_data_valor")
    @@map("serie_indicador")
}

model SerieVariavel {
    id          Int      @id @default(autoincrement())
    variavel_id Int
    variavel    Variavel @relation(fields: [variavel_id], references: [id])

    serie Serie

    data_valor    DateTime @db.Date()
    valor_nominal Decimal  @db.Decimal(65, 30)

    atualizado_em  DateTime @default(now()) @db.Timestamptz(6)
    atualizado_por Int?
    atualizador    Pessoa?  @relation("Atualizador", fields: [atualizado_por], references: [id])

    conferida     Boolean   @default(true)
    conferida_por Int?
    conferida_em  DateTime?

    conferidor      Pessoa? @relation("Conferidor", fields: [conferida_por], references: [id])
    ciclo_fisico_id Int?

    @@index([variavel_id, data_valor])
    @@index([serie, variavel_id, data_valor], map: "idx_serie_variavel_variavel_id_data_valor")
    @@map("serie_variavel")
}

model Iniciativa {
    id                    Int     @id @default(autoincrement())
    meta_id               Int
    meta                  Meta    @relation(fields: [meta_id], references: [id])
    codigo                String
    titulo                String
    contexto              String?
    complemento           String?
    compoe_indicador_meta Boolean
    status                String?

    criado_por     Int?
    criado_em      DateTime  @default(now()) @db.Timestamptz(6)
    atualizado_por Int?
    atualizado_em  DateTime  @default(now()) @db.Timestamptz(6)
    removido_por   Int?
    removido_em    DateTime? @db.Timestamptz(6)

    ativo Boolean @default(false)

    atualizador Pessoa? @relation("Atualizador", fields: [atualizado_por], references: [id])
    criador     Pessoa? @relation("Criador", fields: [criado_por], references: [id])
    removedor   Pessoa? @relation("Removedor", fields: [removido_por], references: [id])

    iniciativa_orgao         IniciativaOrgao[]
    iniciativa_responsavel   IniciativaResponsavel[]
    iniciativa_tag           IniciativaTag[]
    Indicador                Indicador[]
    atividade                Atividade[]
    Cronograma               Cronograma[]
    PainelConteudoDetalhe    PainelConteudoDetalhe[]
    OrcamentoPlanejado       OrcamentoPlanejado[]
    OrcamentoRealizado       OrcamentoRealizado[]
    MetaOrcamento            OrcamentoPrevisto[]
    projetos                 Projeto[]
    OrcamentoPlanejadoZerado OrcamentoPrevistoZerado[]

    @@index([meta_id])
    @@map("iniciativa")
}

model IniciativaTag {
    id            Int        @id @default(autoincrement())
    iniciativa_id Int
    iniciativa    Iniciativa @relation(fields: [iniciativa_id], references: [id])
    tag_id        Int
    tag           Tag        @relation(fields: [tag_id], references: [id])

    @@index([iniciativa_id])
    @@map("iniciativa_tag")
}

model IniciativaOrgao {
    id Int @id @default(autoincrement())

    iniciativa_id Int
    iniciativa    Iniciativa @relation(fields: [iniciativa_id], references: [id])
    responsavel   Boolean
    orgao_id      Int
    orgao         Orgao      @relation(fields: [orgao_id], references: [id])

    @@index([iniciativa_id])
    @@index([orgao_id])
    @@map("iniciativa_orgao")
}

model IniciativaResponsavel {
    id Int @id @default(autoincrement())

    iniciativa_id Int
    iniciativa    Iniciativa @relation(fields: [iniciativa_id], references: [id])
    pessoa_id     Int
    pessoa        Pessoa     @relation("IniciativaPessoaResp", fields: [pessoa_id], references: [id])
    orgao_id      Int
    orgao         Orgao      @relation(fields: [orgao_id], references: [id])

    coordenador_responsavel_cp Boolean

    @@index([iniciativa_id])
    @@index([orgao_id])
    @@map("iniciativa_responsavel")
}

model Atividade {
    id                          Int        @id @default(autoincrement())
    iniciativa_id               Int
    iniciativa                  Iniciativa @relation(fields: [iniciativa_id], references: [id])
    codigo                      String
    titulo                      String
    contexto                    String?
    complemento                 String?
    compoe_indicador_iniciativa Boolean
    status                      String?

    criado_por     Int?
    criado_em      DateTime  @default(now()) @db.Timestamptz(6)
    atualizado_por Int?
    atualizado_em  DateTime  @default(now()) @db.Timestamptz(6)
    removido_por   Int?
    removido_em    DateTime? @db.Timestamptz(6)

    ativo Boolean @default(false)

    atualizador Pessoa? @relation("Atualizador", fields: [atualizado_por], references: [id])
    criador     Pessoa? @relation("Criador", fields: [criado_por], references: [id])
    removedor   Pessoa? @relation("Removedor", fields: [removido_por], references: [id])

    atividade_orgao          AtividadeOrgao[]
    atividade_responsavel    AtividadeResponsavel[]
    atividade_tag            AtividadeTag[]
    Indicador                Indicador[]
    Cronograma               Cronograma[]
    PainelConteudoDetalhe    PainelConteudoDetalhe[]
    OrcamentoPlanejado       OrcamentoPlanejado[]
    OrcamentoRealizado       OrcamentoRealizado[]
    MetaOrcamento            OrcamentoPrevisto[]
    projetos                 Projeto[]
    OrcamentoPlanejadoZerado OrcamentoPrevistoZerado[]

    @@index([iniciativa_id])
    @@map("atividade")
}

model AtividadeTag {
    id           Int       @id @default(autoincrement())
    atividade_id Int
    atividade    Atividade @relation(fields: [atividade_id], references: [id])
    tag_id       Int
    tag          Tag       @relation(fields: [tag_id], references: [id])

    @@index([atividade_id])
    @@map("atividade_tag")
}

model AtividadeOrgao {
    id Int @id @default(autoincrement())

    atividade_id Int
    atividade    Atividade @relation(fields: [atividade_id], references: [id])
    responsavel  Boolean
    orgao_id     Int
    orgao        Orgao     @relation(fields: [orgao_id], references: [id])

    @@index([atividade_id])
    @@index([orgao_id])
    @@map("atividade_orgao")
}

model AtividadeResponsavel {
    id Int @id @default(autoincrement())

    atividade_id Int
    atividade    Atividade @relation(fields: [atividade_id], references: [id])
    pessoa_id    Int
    pessoa       Pessoa    @relation("AtividadePessoaResp", fields: [pessoa_id], references: [id])
    orgao_id     Int
    orgao        Orgao     @relation(fields: [orgao_id], references: [id])

    coordenador_responsavel_cp Boolean

    @@index([atividade_id])
    @@index([orgao_id])
    @@map("atividade_responsavel")
}

model Cronograma {
    id Int @id @default(autoincrement())

    meta_id       Int?
    meta          Meta?       @relation(fields: [meta_id], references: [id])
    iniciativa_id Int?
    iniciativa    Iniciativa? @relation(fields: [iniciativa_id], references: [id])
    atividade_id  Int?
    atividade     Atividade?  @relation(fields: [atividade_id], references: [id])

    descricao            String?
    observacao           String?
    inicio_previsto      DateTime?         @db.Date()
    termino_previsto     DateTime?         @db.Date()
    inicio_real          DateTime?         @db.Date()
    termino_real         DateTime?         @db.Date()
    regionalizavel       Boolean
    nivel_regionalizacao Int?
    CronogramaOrgao      CronogramaOrgao[]
    CronogramaEtapa      CronogramaEtapa[]

    // percentual_execucao // calculado a partir dos filhos (todos, incluindo as etapas (nivel 1/reais) herdadas)
    percentual_execucao Int?

    criado_por     Int?
    criado_em      DateTime  @default(now()) @db.Timestamptz(6)
    atualizado_por Int?
    atualizado_em  DateTime  @default(now()) @db.Timestamptz(6)
    removido_por   Int?
    removido_em    DateTime? @db.Timestamptz(6)

    ativo Boolean @default(false)

    atualizador Pessoa? @relation("Atualizador", fields: [atualizado_por], references: [id])
    criador     Pessoa? @relation("Criador", fields: [criado_por], references: [id])
    removedor   Pessoa? @relation("Removedor", fields: [removido_por], references: [id])

    etapa Etapa[]

    @@index([atividade_id])
    @@index([iniciativa_id])
    @@index([meta_id])
    @@map("cronograma")
}

model Etapa {
    id Int @id @default(autoincrement())

    etapa_pai_id  Int?
    etapa_pai     Etapa?     @relation("EtapaPai", fields: [etapa_pai_id], references: [id])
    etapa_filha   Etapa[]    @relation("EtapaPai")
    regiao_id     Int?
    regiao        Regiao?    @relation(fields: [regiao_id], references: [id])
    cronograma_id Int
    cronograma    Cronograma @relation(fields: [cronograma_id], references: [id])

    titulo           String?
    nivel            String?
    descricao        String?
    inicio_previsto  DateTime?         @db.Date()
    termino_previsto DateTime?         @db.Date()
    inicio_real      DateTime?         @db.Date()
    termino_real     DateTime?         @db.Date()
    prazo_inicio     DateTime?
    prazo_termino    DateTime?
    status           String?
    CronogramaEtapa  CronogramaEtapa[]

    peso                Int?
    percentual_execucao Int?
    n_filhos_imediatos  Int?
    // quando o n_filhos_imediatos===0 entao, os dois acima sao informados
    // se não, são calculados pela trigger, usando a formula
    // %execucao pai = round( (%execucao * nvl(peso) )/(soma dos pesos dos filhos) )

    criado_por     Int?
    criado_em      DateTime  @default(now()) @db.Timestamptz(6)
    atualizado_por Int?
    atualizado_em  DateTime  @default(now()) @db.Timestamptz(6)
    removido_por   Int?
    removido_em    DateTime? @db.Timestamptz(6)

    atualizador Pessoa? @relation("Atualizador", fields: [atualizado_por], references: [id])
    criador     Pessoa? @relation("Criador", fields: [criado_por], references: [id])
    removedor   Pessoa? @relation("Removedor", fields: [removido_por], references: [id])

    responsaveis EtapaResponsavel[]

    @@index([regiao_id])
    @@index([etapa_pai_id])
    @@index([cronograma_id])
    @@map("etapa")
}

model EtapaResponsavel {
    id Int @id @default(autoincrement())

    etapa_id  Int
    pessoa_id Int

    pessoa Pessoa @relation(fields: [pessoa_id], references: [id])
    etapa  Etapa  @relation(fields: [etapa_id], references: [id])

    @@unique([pessoa_id, etapa_id], name: "etapa_pessoa_uniq")
    @@index([pessoa_id])
    @@index([etapa_id])
    @@map("etapa_responsavel")
}

model CronogramaOrgao {
    id Int @id @default(autoincrement())

    cronograma_id Int
    cronograma    Cronograma @relation(fields: [cronograma_id], references: [id])
    orgao_id      Int
    orgao         Orgao      @relation(fields: [orgao_id], references: [id])
    pessoa_id     Int
    pessoa        Pessoa     @relation(fields: [pessoa_id], references: [id])

    @@index([cronograma_id])
    @@index([orgao_id])
    @@map("cronograma_orgao")
}

enum CronogramaEtapaNivel {
    Etapa
    Fase
    SubFase
}

model CronogramaEtapa {
    id Int @id @default(autoincrement())

    cronograma_id Int
    cronograma    Cronograma           @relation(fields: [cronograma_id], references: [id])
    etapa_id      Int
    etapa         Etapa                @relation(fields: [etapa_id], references: [id])
    nivel         CronogramaEtapaNivel
    ordem         Int

    inativo         Boolean   @default(false)
    data_inativacao DateTime? @db.Timestamptz(6)

    @@unique([cronograma_id, etapa_id], name: "CronogramaEtapaUniq")
    @@index([cronograma_id])
    @@index([etapa_id])
    @@map("cronograma_etapa")
}

model Painel {
    id Int @id @default(autoincrement())

    nome          String
    periodicidade Periodicidade
    ativo         Boolean       @default(true)

    pdm_id Int
    pdm    Pdm @relation(fields: [pdm_id], references: [id])

    mostrar_planejado_por_padrao Boolean @default(true)
    mostrar_acumulado_por_padrao Boolean @default(true)
    mostrar_indicador_por_padrao Boolean @default(true)

    criado_por     Int?
    criado_em      DateTime  @default(now()) @db.Timestamptz(6)
    atualizado_por Int?
    atualizado_em  DateTime  @default(now()) @db.Timestamptz(6)
    removido_por   Int?
    removido_em    DateTime? @db.Timestamptz(6)

    atualizador     Pessoa?          @relation("Atualizador", fields: [atualizado_por], references: [id])
    criador         Pessoa?          @relation("Criador", fields: [criado_por], references: [id])
    removedor       Pessoa?          @relation("Removedor", fields: [removido_por], references: [id])
    painel_conteudo PainelConteudo[]

    grupos PainelGrupoPainel[]

    @@index([pdm_id])
    @@map("painel")
}

enum Periodo {
    Corrente
    Anteriores
    Todos
    EntreDatas
}

model PainelConteudo {
    id Int @id @default(autoincrement())

    painel_id Int
    painel    Painel @relation(fields: [painel_id], references: [id])

    meta_id Int
    meta    Meta @relation(fields: [meta_id], references: [id])

    periodicidade  Periodicidade
    periodo        Periodo       @default(Todos)
    periodo_valor  Int?
    periodo_inicio DateTime?     @db.Date
    periodo_fim    DateTime?     @db.Date

    mostrar_planejado         Boolean
    mostrar_acumulado         Boolean
    mostrar_indicador         Boolean
    mostrar_acumulado_periodo Boolean                 @default(false)
    ordem                     Int?
    detalhes                  PainelConteudoDetalhe[]
    indicador                 Indicador?              @relation(fields: [indicador_id], references: [id])
    indicador_id              Int?

    @@index([painel_id])
    @@index([meta_id])
    @@map("painel_conteudo")
}

enum PainelConteudoTipoDetalhe {
    Variavel
    Iniciativa
    Atividade
}

model PainelConteudoDetalhe {
    id Int @id @default(autoincrement())

    variavel_id        Int?
    variavel           Variavel?              @relation(fields: [variavel_id], references: [id])
    iniciativa_id      Int?
    iniciativa         Iniciativa?            @relation(fields: [iniciativa_id], references: [id])
    atividade_id       Int?
    atividade          Atividade?             @relation(fields: [atividade_id], references: [id])
    painel_conteudo_id Int
    painel_conteudo    PainelConteudo         @relation(fields: [painel_conteudo_id], references: [id], onDelete: Cascade)
    pai_id             Int?
    pai                PainelConteudoDetalhe? @relation("fk", fields: [pai_id], references: [id], onDelete: Cascade)

    mostrar_indicador Boolean

    ordem  Int?
    tipo   PainelConteudoTipoDetalhe
    filhos PainelConteudoDetalhe[]   @relation("fk")

    @@index([painel_conteudo_id])
    @@index([pai_id])
    @@map("painel_conteudo_detalhe")
}

model GrupoPainel {
    id Int @id @default(autoincrement())

    nome  String  @unique
    ativo Boolean @default(true)

    criado_por   Int?
    criado_em    DateTime  @default(now()) @db.Timestamptz(6)
    removido_por Int?
    removido_em  DateTime? @db.Timestamptz(6)

    criador   Pessoa? @relation("Criador", fields: [criado_por], references: [id])
    removedor Pessoa? @relation("Removedor", fields: [removido_por], references: [id])

    pessoas PessoaGrupoPainel[]
    paineis PainelGrupoPainel[]

    @@map("grupo_painel")
}

model PessoaGrupoPainel {
    id Int @id @default(autoincrement())

    pessoa_id       Int
    pessoa          Pessoa      @relation(fields: [pessoa_id], references: [id])
    grupo_painel_id Int
    grupo_painel    GrupoPainel @relation(fields: [grupo_painel_id], references: [id])

    @@index([pessoa_id])
    @@index([grupo_painel_id])
    @@map("pessoa_grupo_painel")
}

model PainelGrupoPainel {
    id Int @id @default(autoincrement())

    painel_id       Int
    painel          Painel      @relation(fields: [painel_id], references: [id])
    grupo_painel_id Int
    grupo_painel    GrupoPainel @relation(fields: [grupo_painel_id], references: [id])

    @@index([painel_id])
    @@index([grupo_painel_id])
    @@map("painel_grupos")
}

enum CicloFase {
    Coleta
    Analise
    Risco
    Fechamento
}

// tabela de origem dos intervalos padrões
model CicloFasesBase {
    id Int @id @default(autoincrement())

    ciclo_fase CicloFase @unique

    n_dias_do_inicio_mes Int
    duracao              Int // quando negativo, vai subtrair do final do mes

    @@map("ciclo_fases_base")
}

// se um dia quiser sobre-escrever em um PDM
model CicloFasesPdmConfig {
    id     Int @id @default(autoincrement())
    pdm_id Int
    pdm    Pdm @relation(fields: [pdm_id], references: [id])

    ciclo_fase CicloFase

    n_dias_do_inicio_mes Int
    duracao              Int

    @@map("ciclo_fases_pdm_config")
}

// ciclos após abertura
model CicloFisico {
    id Int @id @default(autoincrement())

    pdm_id              Int
    pdm                 Pdm              @relation(fields: [pdm_id], references: [id])
    data_ciclo          DateTime         @db.Date()
    ciclo_fase_atual_id Int?
    CicloFaseAtual      CicloFisicoFase? @relation("atual", fields: [ciclo_fase_atual_id], references: [id])
    ativo               Boolean          @default(false)

    acordar_ciclo_em                DateTime?
    acordar_ciclo_errmsg            String?
    acordar_ciclo_executou_em       DateTime?
    fases                           CicloFisicoFase[]                 @relation("fk")
    metas                           Meta[]
    StatusMetaCicloFisico           StatusMetaCicloFisico[]
    StatusVariavelCicloFisico       StatusVariavelCicloFisico[]
    VariavelCicloFisicoQualitativo  VariavelCicloFisicoQualitativo[]
    VariavelCicloFisicoDocumento    VariavelCicloFisicoDocumento[]
    PedidoComplementacao            PedidoComplementacao[]
    MetaCicloFisicoAnalise          MetaCicloFisicoAnalise[]
    MetaCicloFisicoAnaliseDocumento MetaCicloFisicoAnaliseDocumento[]
    MetaCicloFisicoRisco            MetaCicloFisicoRisco[]
    MetaCicloFisicoFechamento       MetaCicloFisicoFechamento[]

    @@index([pdm_id])
    @@index([data_ciclo])
    @@map("ciclo_fisico")
}

// data de cada uma das fases
model CicloFisicoFase {
    id               Int           @id @default(autoincrement())
    ciclo_fisico_id  Int
    ciclo_fisico     CicloFisico   @relation("fk", fields: [ciclo_fisico_id], references: [id])
    cf_estou_em_usos CicloFisico[] @relation("atual")

    data_inicio DateTime  @db.Date()
    data_fim    DateTime  @db.Date()
    ciclo_fase  CicloFase
    metas       Meta[]

    @@index([ciclo_fisico_id])
    @@map("ciclo_fisico_fase")
}

model PessoaAcessoPdm {
    id        Int @id @default(autoincrement())
    pessoa_id Int @unique

    metas_cronograma   Int[]
    metas_variaveis    Int[]
    variaveis          Int[]
    cronogramas_etapas Int[]

    data_ciclo DateTime? @db.Date
    perfil     String

    // se o valor estiver congelado, para debug, não vamos recalcular as permissões
    // exceto se for mudança de ciclo, nesse caso, vai recacular anyway
    congelado Boolean

    pessoa Pessoa @relation(fields: [pessoa_id], references: [id])

    @@index([pessoa_id])
    @@map("pessoa_acesso_pdm")
}

model MetaCicloFisicoAnalise {
    id              Int @id @default(autoincrement())
    meta_id         Int
    ciclo_fisico_id Int

    referencia_data            DateTime @db.Date
    informacoes_complementares String?

    criado_em  DateTime @default(now()) @db.Timestamptz(6)
    criado_por Int

    ultima_revisao Boolean

    removido_em  DateTime?
    removido_por Int?

    ciclo_fisico    CicloFisico @relation(fields: [ciclo_fisico_id], references: [id])
    meta            Meta        @relation(fields: [meta_id], references: [id])
    pessoaCriador   Pessoa      @relation("criador", fields: [criado_por], references: [id])
    pessoaRemovedor Pessoa?     @relation("removedor", fields: [removido_por], references: [id])

    @@index([meta_id, ultima_revisao])
    @@map("meta_ciclo_fisico_analise")
}

model MetaCicloFisicoAnaliseDocumento {
    id              Int @id @default(autoincrement())
    meta_id         Int
    ciclo_fisico_id Int

    referencia_data DateTime @db.Date

    arquivo_id Int
    arquivo    Arquivo @relation(fields: [arquivo_id], references: [id])

    criado_em  DateTime @default(now()) @db.Timestamptz(6)
    criado_por Int

    removido_em  DateTime?
    removido_por Int?

    ciclo_fisico    CicloFisico @relation(fields: [ciclo_fisico_id], references: [id])
    meta            Meta        @relation(fields: [meta_id], references: [id])
    pessoaCriador   Pessoa      @relation("criador", fields: [criado_por], references: [id])
    pessoaRemovedor Pessoa?     @relation("removedor", fields: [removido_por], references: [id])

    @@index([meta_id, ciclo_fisico_id])
    @@map("meta_ciclo_fisico_analise_documento")
}

model MetaCicloFisicoRisco {
    id              Int @id @default(autoincrement())
    meta_id         Int
    ciclo_fisico_id Int

    referencia_data  DateTime @db.Date
    detalhamento     String? /// HTML
    ponto_de_atencao String? /// HTML

    criado_em  DateTime @default(now()) @db.Timestamptz(6)
    criado_por Int

    ultima_revisao Boolean

    removido_em  DateTime?
    removido_por Int?

    ciclo_fisico    CicloFisico @relation(fields: [ciclo_fisico_id], references: [id])
    meta            Meta        @relation(fields: [meta_id], references: [id])
    pessoaCriador   Pessoa      @relation("criador", fields: [criado_por], references: [id])
    pessoaRemovedor Pessoa?     @relation("removedor", fields: [removido_por], references: [id])

    @@index([meta_id, ultima_revisao])
    @@map("meta_ciclo_fisico_risco")
}

model MetaCicloFisicoFechamento {
    id              Int @id @default(autoincrement())
    meta_id         Int
    ciclo_fisico_id Int

    referencia_data DateTime @db.Date
    comentario      String?

    criado_em  DateTime @default(now()) @db.Timestamptz(6)
    criado_por Int

    ultima_revisao Boolean

    removido_em  DateTime?
    removido_por Int?

    ciclo_fisico    CicloFisico @relation(fields: [ciclo_fisico_id], references: [id])
    meta            Meta        @relation(fields: [meta_id], references: [id])
    pessoaCriador   Pessoa      @relation("criador", fields: [criado_por], references: [id])
    pessoaRemovedor Pessoa?     @relation("removedor", fields: [removido_por], references: [id])

    @@index([meta_id, ultima_revisao])
    @@map("meta_ciclo_fisico_fechamento")
}

model VariavelCicloFisicoQualitativo {
    id              Int @id @default(autoincrement())
    meta_id         Int
    ciclo_fisico_id Int
    variavel_id     Int

    referencia_data     DateTime @db.Date
    analise_qualitativa String?
    enviado_para_cp     Boolean

    criado_em  DateTime @default(now()) @db.Timestamptz(6)
    criado_por Int

    ultima_revisao Boolean

    removido_em  DateTime?
    removido_por Int?

    ciclo_fisico    CicloFisico @relation(fields: [ciclo_fisico_id], references: [id])
    meta            Meta        @relation(fields: [meta_id], references: [id])
    variavel        Variavel    @relation(fields: [variavel_id], references: [id])
    pessoaCriador   Pessoa      @relation("criador", fields: [criado_por], references: [id])
    pessoaRemovedor Pessoa?     @relation("removedor", fields: [removido_por], references: [id])

    @@index([meta_id, ultima_revisao])
    @@map("variavel_ciclo_fisico_qualitativo")
}

model PedidoComplementacao {
    id              Int @id @default(autoincrement())
    ciclo_fisico_id Int
    variavel_id     Int

    pedido String

    criado_em  DateTime @default(now()) @db.Timestamptz(6)
    criado_por Int

    ultima_revisao Boolean
    atendido       Boolean
    atendido_em    DateTime?
    atendido_por   Int?

    removido_em  DateTime?
    removido_por Int?

    ciclo_fisico    CicloFisico @relation(fields: [ciclo_fisico_id], references: [id])
    variavel        Variavel    @relation(fields: [variavel_id], references: [id])
    pessoaCriador   Pessoa      @relation("criador", fields: [criado_por], references: [id])
    pessoaAtendeu   Pessoa?     @relation("atendeu", fields: [atendido_por], references: [id])
    pessoaRemovedor Pessoa?     @relation("removedor", fields: [removido_por], references: [id])

    @@index([ciclo_fisico_id, variavel_id, ultima_revisao])
    @@map("variavel_ciclo_fisico_pedido_complementacao")
}

model VariavelCicloFisicoDocumento {
    id              Int @id @default(autoincrement())
    meta_id         Int
    ciclo_fisico_id Int
    variavel_id     Int

    referencia_data DateTime @db.Date

    arquivo_id Int
    arquivo    Arquivo @relation(fields: [arquivo_id], references: [id])

    criado_em  DateTime @default(now()) @db.Timestamptz(6)
    criado_por Int

    removido_em  DateTime?
    removido_por Int?

    ciclo_fisico    CicloFisico @relation(fields: [ciclo_fisico_id], references: [id])
    meta            Meta        @relation(fields: [meta_id], references: [id])
    variavel        Variavel    @relation(fields: [variavel_id], references: [id])
    pessoaCriador   Pessoa      @relation("criador", fields: [criado_por], references: [id])
    pessoaRemovedor Pessoa?     @relation("removedor", fields: [removido_por], references: [id])

    @@index([ciclo_fisico_id, variavel_id])
    @@map("variavel_ciclo_fisico_documento")
}

model StatusVariavelCicloFisico {
    id                     Int     @id @default(autoincrement())
    meta_id                Int
    ciclo_fisico_id        Int
    variavel_id            Int
    aguarda_cp             Boolean @default(false)
    aguarda_complementacao Boolean @default(false)
    conferida              Boolean @default(false)

    ciclo_fisico CicloFisico @relation(fields: [ciclo_fisico_id], references: [id])
    meta         Meta        @relation(fields: [meta_id], references: [id])
    variavel     Variavel    @relation(fields: [variavel_id], references: [id])

    @@index([variavel_id])
    @@index([ciclo_fisico_id])
    @@map("status_variavel_ciclo_fisico")
}

model StatusMetaCicloFisico {
    id              Int @id @default(autoincrement())
    meta_id         Int
    ciclo_fisico_id Int

    pessoa_id         Int
    status_coleta     String @default("")
    // nao atualizadas = uma ou mais variaveis não preenchida
    // aguardando complementação = uma ou mais variavel aguarda complementação
    // não conferidas = uma ou mais variavel não foi conferida
    // outros = qualquer uma não categorizada acima
    status_cronograma String @default("")

    ciclo_fisico CicloFisico @relation(fields: [ciclo_fisico_id], references: [id])
    meta         Meta        @relation(fields: [meta_id], references: [id])

    @@index([pessoa_id])
    @@index([ciclo_fisico_id])
    @@map("status_meta_ciclo_fisico")
}

model PdmOrcamentoConfig {
    id     Int @id @default(autoincrement())
    pdm_id Int

    ano_referencia Int

    previsao_custo_disponivel Boolean @default(true)
    planejado_disponivel      Boolean @default(false)
    execucao_disponivel       Boolean @default(false)

    execucao_disponivel_meses Int[] @default([3, 6, 9, 12])

    pdm Pdm @relation(fields: [pdm_id], references: [id])

    @@index([pdm_id])
    @@map("meta_orcamento_config")
}

model OrcamentoPrevisto {
    id Int @id @default(autoincrement())

    projeto_id         Int?
    meta_id            Int?
    iniciativa_id      Int?
    atividade_id       Int?
    versao_anterior_id Int? @unique

    ano_referencia Int

    criado_em  DateTime @default(now()) @db.Timestamptz(6)
    criado_por Int

    atualizado_em  DateTime @default(now()) @db.Timestamptz(6)
    atualizado_por Int?

    removido_em  DateTime?
    removido_por Int?

    custo_previsto Float @db.DoublePrecision

    parte_dotacao String @default("")

    projeto     Projeto?    @relation(fields: [projeto_id], references: [id])
    meta        Meta?       @relation(fields: [meta_id], references: [id])
    iniciativa  Iniciativa? @relation(fields: [iniciativa_id], references: [id])
    atividade   Atividade?  @relation(fields: [atividade_id], references: [id])
    criador     Pessoa      @relation("criador", fields: [criado_por], references: [id])
    removedor   Pessoa?     @relation("removedor", fields: [removido_por], references: [id])
    atualizador Pessoa?     @relation("atualizador", fields: [atualizado_por], references: [id])

    versao_anterior OrcamentoPrevisto? @relation("versao_anterior", fields: [versao_anterior_id], references: [id])
    versao_seguinte OrcamentoPrevisto? @relation("versao_anterior")

    @@index([meta_id, ano_referencia])
    @@map("meta_orcamento")
}

model DotacaoPlanejado {
    id Int @id @default(autoincrement())

    informacao_valida Boolean
    sincronizado_em   DateTime? @default(now()) @db.Timestamptz(6)

    ano_referencia Int
    mes_utilizado  Int

    dotacao               String
    val_orcado_inicial    Decimal @db.Decimal(15, 2)
    val_orcado_atualizado Decimal @db.Decimal(15, 2)
    saldo_disponivel      Decimal @db.Decimal(15, 2)

    @@unique([ano_referencia, dotacao])
    @@map("dotacao_planejado")
}

model PdmDotacaoPlanejado {
    id Int @id @default(autoincrement())

    pdm_id Int
    pdm    Pdm @relation(fields: [pdm_id], references: [id])

    ano_referencia Int
    dotacao        String

    pressao_orcamentaria Boolean
    soma_valor_planejado Decimal @db.Decimal(15, 2)

    @@unique([pdm_id, ano_referencia, dotacao])
    @@map("pdm_dotacao_planejado")
}

model PortfolioDotacaoPlanejado {
    id Int @id @default(autoincrement())

    portfolio_id Int
    portfolio    Portfolio @relation(fields: [portfolio_id], references: [id])

    ano_referencia Int
    dotacao        String

    pressao_orcamentaria Boolean
    soma_valor_planejado Decimal @db.Decimal(15, 2)

    @@unique([portfolio_id, ano_referencia, dotacao])
    @@map("portfolio_dotacao_planejado")
}

model DotacaoRealizado {
    id Int @id @default(autoincrement())

    informacao_valida Boolean
    sincronizado_em   DateTime? @default(now()) @db.Timestamptz(6)

    ano_referencia Int
    mes_utilizado  Int

    dotacao         String
    empenho_liquido Decimal @db.Decimal(15, 2)
    valor_liquidado Decimal @db.Decimal(15, 2)

    @@unique([ano_referencia, dotacao])
    @@map("dotacao_realizado")
}

model PdmDotacaoRealizado {
    id Int @id @default(autoincrement())

    pdm_id Int
    pdm    Pdm @relation(fields: [pdm_id], references: [id])

    ano_referencia Int
    dotacao        String

    soma_valor_empenho   Decimal @default(0) @db.Decimal(15, 2)
    soma_valor_liquidado Decimal @default(0) @db.Decimal(15, 2)

    @@unique([pdm_id, ano_referencia, dotacao])
    @@map("pdm_dotacao_realizado")
}

model PortfolioDotacaoRealizado {
    id Int @id @default(autoincrement())

    portfolio_id Int
    portfolio    Portfolio @relation(fields: [portfolio_id], references: [id])

    ano_referencia Int
    dotacao        String

    soma_valor_empenho   Decimal @default(0) @db.Decimal(15, 2)
    soma_valor_liquidado Decimal @default(0) @db.Decimal(15, 2)

    @@unique([portfolio_id, ano_referencia, dotacao])
    @@map("portfolio_dotacao_realizado")
}

model DotacaoProcesso {
    id Int @id @default(autoincrement())

    informacao_valida Boolean
    sincronizado_em   DateTime? @default(now()) @db.Timestamptz(6)

    ano_referencia Int
    mes_utilizado  Int

    dotacao          String
    dotacao_processo String
    empenho_liquido  Decimal @db.Decimal(15, 2)
    valor_liquidado  Decimal @db.Decimal(15, 2)

    @@unique([ano_referencia, dotacao, dotacao_processo])
    @@map("dotacao_processo")
}

model PdmDotacaoProcesso {
    id Int @id @default(autoincrement())

    pdm_id Int
    pdm    Pdm @relation(fields: [pdm_id], references: [id])

    ano_referencia   Int
    dotacao          String
    dotacao_processo String

    soma_valor_empenho   Decimal @default(0) @db.Decimal(15, 2)
    soma_valor_liquidado Decimal @default(0) @db.Decimal(15, 2)

    @@unique([pdm_id, ano_referencia, dotacao, dotacao_processo])
    @@map("pdm_dotacao_processo")
}

model PortfolioDotacaoProcesso {
    id Int @id @default(autoincrement())

    portfolio_id Int
    portfolio    Portfolio @relation(fields: [portfolio_id], references: [id])

    ano_referencia   Int
    dotacao          String
    dotacao_processo String

    soma_valor_empenho   Decimal @default(0) @db.Decimal(15, 2)
    soma_valor_liquidado Decimal @default(0) @db.Decimal(15, 2)

    @@unique([portfolio_id, ano_referencia, dotacao, dotacao_processo])
    @@map("portfolio_dotacao_processo")
}

model DotacaoProcessoNota {
    id Int @id @default(autoincrement())

    informacao_valida Boolean
    sincronizado_em   DateTime? @default(now()) @db.Timestamptz(6)

    ano_referencia Int
    mes_utilizado  Int

    dotacao               String
    dotacao_processo      String
    dotacao_processo_nota String

    empenho_liquido Decimal @db.Decimal(15, 2)
    valor_liquidado Decimal @db.Decimal(15, 2)

    @@unique([ano_referencia, dotacao, dotacao_processo, dotacao_processo_nota])
    @@map("dotacao_processo_nota")
}

model PdmDotacaoProcessoNota {
    id Int @id @default(autoincrement())

    pdm_id Int
    pdm    Pdm @relation(fields: [pdm_id], references: [id])

    ano_referencia Int

    dotacao               String
    dotacao_processo      String
    dotacao_processo_nota String

    soma_valor_empenho   Decimal @default(0) @db.Decimal(15, 2)
    soma_valor_liquidado Decimal @default(0) @db.Decimal(15, 2)

    @@unique([pdm_id, ano_referencia, dotacao, dotacao_processo, dotacao_processo_nota])
    @@map("pdm_dotacao_processo_nota")
}

model PortfolioDotacaoProcessoNota {
    id Int @id @default(autoincrement())

    portfolio_id Int
    portfolio    Portfolio @relation(fields: [portfolio_id], references: [id])

    ano_referencia Int

    dotacao               String
    dotacao_processo      String
    dotacao_processo_nota String

    soma_valor_empenho   Decimal @default(0) @db.Decimal(15, 2)
    soma_valor_liquidado Decimal @default(0) @db.Decimal(15, 2)

    @@unique([portfolio_id, ano_referencia, dotacao, dotacao_processo, dotacao_processo_nota])
    @@map("portfolio_dotacao_processo_nota")
}

model OrcamentoPlanejado {
    id            Int  @id @default(autoincrement())
    projeto_id    Int?
    meta_id       Int?
    iniciativa_id Int?
    atividade_id  Int?

    valor_planejado Decimal @db.Decimal(15, 2)
    ano_referencia  Int
    dotacao         String

    criado_em  DateTime @default(now()) @db.Timestamptz(6)
    criado_por Int

    removido_em  DateTime?
    removido_por Int?

    projeto    Projeto?    @relation(fields: [projeto_id], references: [id])
    meta       Meta?       @relation(fields: [meta_id], references: [id])
    iniciativa Iniciativa? @relation(fields: [iniciativa_id], references: [id])
    atividade  Atividade?  @relation(fields: [atividade_id], references: [id])
    criador    Pessoa      @relation("criador", fields: [criado_por], references: [id])
    removedor  Pessoa?     @relation("removedor", fields: [removido_por], references: [id])

    @@index([meta_id])
    @@index([projeto_id])
    @@index([ano_referencia, meta_id])
    @@index([ano_referencia, iniciativa_id])
    @@index([ano_referencia, atividade_id])
    @@map("orcamento_planejado")
}

model OrcamentoPrevistoZerado {
    id             Int  @id @default(autoincrement())
    projeto_id     Int?
    meta_id        Int?
    iniciativa_id  Int?
    atividade_id   Int?
    ano_referencia Int

    criado_em  DateTime @default(now()) @db.Timestamptz(6)
    criado_por Int

    removido_em  DateTime?
    removido_por Int?

    projeto    Projeto?    @relation(fields: [projeto_id], references: [id])
    meta       Meta?       @relation(fields: [meta_id], references: [id])
    iniciativa Iniciativa? @relation(fields: [iniciativa_id], references: [id])
    atividade  Atividade?  @relation(fields: [atividade_id], references: [id])

    criador   Pessoa  @relation("Criador", fields: [criado_por], references: [id])
    removedor Pessoa? @relation("Removedor", fields: [removido_por], references: [id])

    @@map("orcamento_previsto_zerado")
}

model OrcamentoRealizadoItem {
    id Int @id @default(autoincrement())

    valor_empenho   Decimal @db.Decimal(15, 2)
    valor_liquidado Decimal @db.Decimal(15, 2)
    mes             Int
    mes_corrente    Boolean @default(false)

    /// data compilada a partir do ano/mes
    data_referencia DateTime @db.Date()

    sobrescrito_em  DateTime?
    sobrescrito_por Int?

    sobrescritor Pessoa? @relation("sobrescritor", fields: [sobrescrito_por], references: [id])

    OrcamentoRealizado     OrcamentoRealizado @relation(fields: [orcamento_realizado_id], references: [id])
    orcamento_realizado_id Int

    @@index([orcamento_realizado_id])
    @@map("orcamento_realizado_item")
}

model OrcamentoRealizado {
    id            Int  @id @default(autoincrement())
    projeto_id    Int?
    meta_id       Int?
    iniciativa_id Int?
    atividade_id  Int?

    ano_referencia Int
    mes_utilizado  Int
    dotacao        String
    processo       String?
    nota_empenho   String?

    soma_valor_empenho   Decimal                  @db.Decimal(15, 2)
    soma_valor_liquidado Decimal                  @db.Decimal(15, 2)
    itens                OrcamentoRealizadoItem[]

    criado_em  DateTime @default(now()) @db.Timestamptz(6)
    criado_por Int

    removido_em  DateTime?
    removido_por Int?

    projeto    Projeto?    @relation(fields: [projeto_id], references: [id])
    meta       Meta?       @relation(fields: [meta_id], references: [id])
    iniciativa Iniciativa? @relation(fields: [iniciativa_id], references: [id])
    atividade  Atividade?  @relation(fields: [atividade_id], references: [id])
    criador    Pessoa      @relation("criador", fields: [criado_por], references: [id])
    removedor  Pessoa?     @relation("removedor", fields: [removido_por], references: [id])

    @@index([meta_id])
    @@index([projeto_id])
    @@index([ano_referencia, projeto_id])
    @@index([ano_referencia, meta_id])
    @@map("orcamento_realizado")
}

model SofEntidade {
    ano Int @id

    atualizado_em DateTime @default(now()) @db.Timestamptz(6)
    dados         Json     @default("{}") @db.Json

    // marca se acontecer erro ao atualizar a materialized view
    errmsg String?

    @@map("sof_entidade")
}

model TextoConfig {
    id Int @id @default(1)

    bemvindo_email String
    tos            String

    @@map("texto_config")
}

enum TipoRelatorio {
    Consolidado
    Analitico
}

enum FonteRelatorio {
    Orcamento
    Indicadores
    MonitoramentoMensal
    PrevisaoCusto
    Projeto
    Projetos
    ProjetoStatus
    ProjetoPrevisaoCusto
    ProjetoOrcamento
}

model Relatorio {
    id Int @id @default(autoincrement())

    pdm_id Int?

    parametros Json @default("{}") @db.Json

    criado_em  DateTime @default(now()) @db.Timestamptz(6)
    criado_por Int?
    arquivo_id Int

    removido_em  DateTime? @db.Timestamptz(6)
    removido_por Int?

    tipo  TipoRelatorio? // não deu certo remover, o prisma não cria o Enum pq não ta sendo usado!
    fonte FonteRelatorio

    criador              Pessoa?                @relation("criador", fields: [criado_por], references: [id])
    removedor            Pessoa?                @relation("removedor", fields: [removido_por], references: [id])
    arquivo              Arquivo                @relation(fields: [arquivo_id], references: [id])
    pdm                  Pdm?                   @relation(fields: [pdm_id], references: [id])
    ProjetoRelatorioFila ProjetoRelatorioFila[]

    @@index([pdm_id, criado_em, removido_em])
    @@index([fonte, criado_em])
    @@map("relatorio")
}

enum ProjetoFase {
    Registro
    Planejamento
    Acompanhamento
    Encerramento
}

enum ProjetoStatus {
    Registrado // Arquivado ou Priorizado caso seja priorizado
    Selecionado // Arquivado ou EmPlanejamento caso seja Aprovado
    EmPlanejamento // Arquivado ou Validado caso o iniciado
    Planejado // vai para o SEI o arquivo do relatorio
    Validado // EmSuspensao ou EmFechamento caso fechado
    EmAcompanhamento // Suspenso, fechado
    Suspenso // Volta pra EmAcompanhamento ou Fechado
    Fechado // vai para o SEI o arquivo do relatorio
}

model Portfolio {
    id      Int              @id @default(autoincrement())
    titulo  String           @unique
    Projeto Projeto[]
    orgaos  PortfolioOrgao[]

    criado_por     Int?
    criado_em      DateTime  @default(now()) @db.Timestamptz(6)
    atualizado_por Int?
    atualizado_em  DateTime  @default(now()) @db.Timestamptz(6)
    removido_por   Int?
    removido_em    DateTime? @db.Timestamptz(6)

    nivel_maximo_tarefa Int @default(5) @db.SmallInt

    orcamento_execucao_disponivel_meses Int[] @default([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])

    descricao    String    @default("")
    /// data informada pelo usuario
    data_criacao DateTime? @db.Date

    atualizador Pessoa? @relation("Atualizador", fields: [atualizado_por], references: [id])
    criador     Pessoa? @relation("Criador", fields: [criado_por], references: [id])
    removedor   Pessoa? @relation("Removedor", fields: [removido_por], references: [id])

    ProjetoNumerosSequenciais    ProjetoNumeroSequencial[]
    PortfolioDotacaoPlanejado    PortfolioDotacaoPlanejado[]
    PortfolioDotacaoRealizado    PortfolioDotacaoRealizado[]
    PortfolioDotacaoProcesso     PortfolioDotacaoProcesso[]
    PortfolioDotacaoProcessoNota PortfolioDotacaoProcessoNota[]
    ImportacaoLog                ImportacaoOrcamento[]

    @@map("portfolio")
}

model PortfolioOrgao {
    id           Int       @id @default(autoincrement())
    portfolio_id Int       @map("portifolio_id")
    portfolio    Portfolio @relation(fields: [portfolio_id], references: [id])

    orgao_id Int
    orgao    Orgao @relation(fields: [orgao_id], references: [id])

    @@index([portfolio_id])
    @@map("portifolio_orgao")
}

enum CategoriaProcessoSei {
    Encerramento
    Aprovacao
    Manual
}

model ProjetoRegistroSei {
    id         Int     @id @default(autoincrement())
    projeto_id Int
    projeto    Projeto @relation(fields: [projeto_id], references: [id])

    categoria    CategoriaProcessoSei
    processo_sei String

    descricao String?
    link      String?

    // Link, descrição, metadados
    registro_sei_info   Json    @default("{}")
    registro_sei_errmsg String?

    criado_em  DateTime?
    criado_por Int?

    atualizado_em  DateTime?
    atualizado_por Int?

    removido_em  DateTime?
    removido_por Int?

    criador     Pessoa? @relation("Criador", fields: [criado_por], references: [id])
    removedor   Pessoa? @relation("Removedor", fields: [removido_por], references: [id])
    atualizador Pessoa? @relation("Atualizador", fields: [atualizado_por], references: [id])

    @@index([projeto_id])
    @@map("projeto_registro_sei")
}

model Projeto {
    id           Int       @id @default(autoincrement())
    portfolio_id Int
    portfolio    Portfolio @relation(fields: [portfolio_id], references: [id])

    meta_id       Int?
    iniciativa_id Int?
    atividade_id  Int?

    meta       Meta?       @relation(fields: [meta_id], references: [id])
    iniciativa Iniciativa? @relation(fields: [iniciativa_id], references: [id])
    atividade  Atividade?  @relation(fields: [atividade_id], references: [id])

    codigo           String? // abre apenas depois de priorizado
    previsao_custo   Float?
    nome             String
    objeto           String /// HTML
    objetivo         String /// HTML
    origem_tipo      ProjetoOrigemTipo @default(Outro)
    origem_eh_pdm    Boolean           @default(false)
    origem_outro     String?
    meta_codigo      String?
    publico_alvo     String /// HTML
    previsao_inicio  DateTime?         @db.Date() // data de inicio é o ponto fixo, entao se mudar a duracao no frontend, ajusta o final
    previsao_termino DateTime?         @db.Date()
    previsao_duracao Int?

    // calculado pelo cronograma
    realizado_inicio  DateTime? @db.Date()
    realizado_termino DateTime? @db.Date()
    realizado_duracao Int?
    realizado_custo   Float?

    ano_orcamento Int[] @default([])

    projecao_termino DateTime? @db.Date()

    tolerancia_atraso Int     @default(0) // em dias
    em_atraso         Boolean @default(false)
    atraso            Int?

    percentual_concluido Int? // calculado

    // campos para relatorios, calculados via triggers ou que precisam
    // de mudanças
    percentual_atraso Int?
    status_cronograma String?
    risco_maximo      String?
    qtde_riscos       Int     @default(0)

    status         ProjetoStatus
    fase           ProjetoFase
    arquivado      Boolean       @default(false)
    eh_prioritario Boolean       @default(false)

    // Fase=Registro
    resumo            String // campo livre
    escopo            String?
    principais_etapas String // read-only apos Fase=Registro

    // Fase=Planejamento
    nao_escopo String? /// HTML

    // Fase=Detalhamento, required pra entrar na fase Planejamento
    secretario_responsavel String?
    secretario_executivo   String?
    coordenador_ue         String?

    orgao_gestor_id              Int
    orgao_gestor                 Orgao @relation("orgao_gestor", fields: [orgao_gestor_id], references: [id])
    responsaveis_no_orgao_gestor Int[] @default([])

    orgao_responsavel_id Int?
    orgao_responsavel    Orgao? @relation("orgao_responsavel", fields: [orgao_responsavel_id], references: [id])

    responsavel_id Int?
    responsavel    Pessoa? @relation("ppResponsavel", fields: [responsavel_id], references: [id])

    // fornecido pelo user
    data_aprovacao DateTime? @db.Date
    data_revisao   DateTime? @db.Date
    versao         String?

    registrado_em    DateTime
    registrado_por   Int
    pessoaQRegistrou Pessoa?  @relation("criador", fields: [registrado_por], references: [id])

    // quem moveu de EmRegistro para EmDetalhamento
    selecionado_em    DateTime?
    selecionado_por   Int?
    pessoaQSelecionou Pessoa?   @relation("ppSelecionado", fields: [selecionado_por], references: [id])

    // quem moveu de EmDetalhamento para EmPlanejamento
    em_planejamento_em  DateTime?
    em_planejamento_por Int?
    pessoaQPlanejou     Pessoa?   @relation("ppEm_planejamento", fields: [em_planejamento_por], references: [id])

    // quem arquivou, vindo de qualquer lugar
    arquivado_em    DateTime?
    arquivado_por   Int?
    pessoaQArquivou Pessoa?   @relation("ppArquivado", fields: [arquivado_por], references: [id])

    // quem suspendeu (vindo do EmExecucao indo pro EmSuspensao)
    suspenso_em      DateTime?
    suspenso_por     Int?
    pessoaQSuspendeu Pessoa?   @relation("ppSuspenso", fields: [suspenso_por], references: [id])

    restaurado_em    DateTime?
    restaurado_por   Int?
    pessoaQRestaurou Pessoa?   @relation("ppRestaurou", fields: [restaurado_por], references: [id])

    validado_em     DateTime?
    validado_por    Int?
    pessoaQValidado Pessoa?   @relation("ppValidado", fields: [validado_por], references: [id])

    finalizou_planejamento_em  DateTime?
    finalizou_planejamento_por Int?
    pessoaQFinalizouPlan       Pessoa?   @relation("ppFinalizouPlan", fields: [finalizou_planejamento_por], references: [id])

    // quem migrou de EmSuspensao indo EmFechamento
    cancelado_em    DateTime?
    cancelado_por   Int?
    pessoaQCancelou Pessoa?   @relation("ppCancelou", fields: [cancelado_por], references: [id])

    // quem migrou de EmSuspensao indo EmExecucao
    reiniciado_em    DateTime?
    reiniciado_por   Int?
    pessoaQReiniciou Pessoa?   @relation("ppReiniciou", fields: [reiniciado_por], references: [id])

    // quem migrou de EmPlanejamento para EmExecucao
    iniciado_em    DateTime?
    iniciado_por   Int?
    pessoaQIniciou Pessoa?   @relation("ppIniciou", fields: [iniciado_por], references: [id])

    // quem migrou de EmExecucao para EmFechamento
    terminado_em    DateTime?
    terminado_por   Int?
    pessoaQTerminou Pessoa?   @relation("ppTerminou", fields: [terminado_por], references: [id])

    premissas  ProjetoPremissa[] // depois de selecionado
    restricoes ProjetoRestricao[] // depois de selecionado

    licoes_aprendidas     ProjetoLicaoAprendida[] // só na execucao
    fonte_recursos        ProjetoFonteRecurso[] // sempre
    documentos            ProjetoDocumento[] // sempre
    tarefas               Tarefa[] // depois de EmPlanejamento
    ProjetoRisco          ProjetoRisco[] //  depois de EmPlanejamento
    ProjetoAcompanhamento ProjetoAcompanhamento[] // depois de EmAcompanhamento
    orgaos_participantes  ProjetoOrgaoParticipante[] // sempre

    removido_em               DateTime?
    removido_por              Int?
    ProjetoRegistroSei        ProjetoRegistroSei[]
    ProjetoRelatorioFila      ProjetoRelatorioFila[]
    ProjetoNumerosSequenciais ProjetoNumeroSequencial[]

    // data em que o sistema deve novamente calcular os atrasos automaticamente
    tarefas_proximo_recalculo DateTime                  @default(now())
    MetaOrcamento             OrcamentoPrevisto[]
    OrcamentoPlanejado        OrcamentoPlanejado[]
    OrcamentoRealizado        OrcamentoRealizado[]
    OrcamentoPlanejadoZerado  OrcamentoPrevistoZerado[]

    @@index([removido_em])
    @@map("projeto")
}

enum ProjetoMotivoRelatorio {
    MudancaDeStatus
    ProjetoSelecionado
    ProjetoPlanejado
    ProjetoEncerrado
}

model ProjetoRelatorioFila {
    id         Int     @id @default(autoincrement())
    projeto_id Int
    projeto    Projeto @relation(fields: [projeto_id], references: [id])

    congelado_em DateTime? @map("locked_at")
    executado_em DateTime?

    relatorio_id Int?
    relatorio    Relatorio? @relation(fields: [relatorio_id], references: [id])

    motivado_relatorio ProjetoMotivoRelatorio @default(MudancaDeStatus)

    @@index([projeto_id])
    @@map("projeto_relatorio_fila")
}

enum ProjetoOrigemTipo {
    PdmSistema
    PdmAntigo
    Outro
}

model ProjetoOrgaoParticipante {
    id Int @id @default(autoincrement())

    projeto_id Int
    projeto    Projeto @relation(fields: [projeto_id], references: [id])

    orgao_id Int
    orgao    Orgao @relation(fields: [orgao_id], references: [id])

    @@index([projeto_id])
    @@map("projeto_orgao_participante")
}

model ProjetoPremissa {
    id Int @id @default(autoincrement())

    projeto_id Int
    projeto    Projeto @relation(fields: [projeto_id], references: [id])

    premissa String

    @@index([projeto_id])
    @@map("projeto_premissa")
}

model ProjetoRestricao {
    id Int @id @default(autoincrement())

    projeto_id Int
    projeto    Projeto @relation(fields: [projeto_id], references: [id])

    restricao String

    @@index([projeto_id])
    @@map("projeto_restricao")
}

model ProjetoLicaoAprendida {
    id Int @id @default(autoincrement())

    data_registro DateTime
    responsavel   String
    sequencial    Int

    projeto_id Int
    criado_por Int
    criado_em  DateTime

    removido_por Int?
    removido_em  DateTime?

    projeto   Projeto @relation(fields: [projeto_id], references: [id])
    criador   Pessoa  @relation("criador", fields: [criado_por], references: [id])
    removedor Pessoa? @relation("removedor", fields: [removido_por], references: [id])

    descricao  String
    observacao String?
    contexto   String?
    resultado  String?

    @@index([projeto_id])
    @@map("projeto_licao_aprendida")
}

model ProjetoFonteRecurso {
    id Int @id @default(autoincrement())

    projeto_id Int
    projeto    Projeto @relation(fields: [projeto_id], references: [id])

    fonte_recurso_cod_sof String
    fonte_recurso_ano     Int

    valor_percentual Float?
    valor_nominal    Float?

    @@index([projeto_id])
    @@map("projeto_fonte_recurso")
}

model ProjetoDocumento {
    id Int @id @default(autoincrement())

    projeto_id Int
    arquivo_id Int

    projeto Projeto @relation(fields: [projeto_id], references: [id])
    arquivo Arquivo @relation(fields: [arquivo_id], references: [id])

    criado_por     Int?
    criado_em      DateTime  @default(now()) @db.Timestamptz(6)
    atualizado_por Int?
    atualizado_em  DateTime  @default(now()) @db.Timestamptz(6)
    removido_por   Int?
    removido_em    DateTime? @db.Timestamptz(6)

    atualizador Pessoa? @relation("Atualizador", fields: [atualizado_por], references: [id])
    criador     Pessoa? @relation("Criador", fields: [criado_por], references: [id])
    removedor   Pessoa? @relation("Removedor", fields: [removido_por], references: [id])

    @@index([projeto_id])
    @@map("projeto_documento")
}

model ProjetoNumeroSequencial {
    projeto_id Int
    projeto    Projeto @relation(fields: [projeto_id], references: [id])

    portfolio_id Int
    portfolio    Portfolio @relation(fields: [portfolio_id], references: [id])

    ano   Int
    valor Int

    @@unique([projeto_id, portfolio_id])
    @@unique([projeto_id])
    @@map("projeto_numero_sequencial")
}

model Tarefa {
    id Int @id @default(autoincrement())

    projeto_id    Int
    orgao_id      Int
    tarefa_pai_id Int?

    projeto    Projeto  @relation(fields: [projeto_id], references: [id])
    tarefa_pai Tarefa?  @relation("tarefa_pai", fields: [tarefa_pai_id], references: [id])
    filhos     Tarefa[] @relation("tarefa_pai")
    orgao      Orgao    @relation(fields: [orgao_id], references: [id])

    tarefa    String // 60 chars
    descricao String
    recursos  String /// pessoas que executam a task, não necessariamente dentro do SMAE

    numero            Int
    nivel             Int       @db.SmallInt
    // pode calcular se o termino estiver null,
    // mas o inicio sempre precisa existir pra fazer as contas, ou seja, se estiver null, é ignorado na
    // parte de buscar o minimo
    inicio_planejado  DateTime? @db.Date() // data de inicio é o ponto fixo, entao se mudar a duracao no frontend, ajusta o final
    termino_planejado DateTime? @db.Date()
    duracao_planejado Int?

    n_dep_inicio_planejado  Int @default(0) @db.SmallInt
    n_dep_termino_planejado Int @default(0) @db.SmallInt

    ordem_topologica_inicio_planejado  Int[]
    ordem_topologica_termino_planejado Int[]

    inicio_real  DateTime? @db.Date()
    termino_real DateTime? @db.Date()
    duracao_real Int?

    inicio_planejado_calculado  Boolean @default(false)
    termino_planejado_calculado Boolean @default(false)
    duracao_planejado_calculado Boolean @default(false)

    db_projecao_inicio  DateTime? @map("projecao_inicio") @db.Date()
    db_projecao_termino DateTime? @map("projecao_termino") @db.Date()
    db_projecao_atraso  Int?      @map("projecao_atraso")

    n_filhos_imediatos Int @default(0)

    custo_estimado Float?
    custo_real     Float?
    eh_marco       Boolean @default(false)

    // calculado no caso dos nós, mas é o % realizado de fato, no caso das folhas
    // formula: soma (duracao prevista * nvl(percentual realizado, 0) / 100) / (soma das duracoes previstas)
    percentual_concluido Float?

    removido_em  DateTime?
    removido_por Int?

    atualizado_em DateTime?

    dependencias    TarefaDependente[] @relation("dependencias")
    ref_dependentes TarefaDependente[] @relation("ref_dependentes")

    RiscoTarefa RiscoTarefa[]

    @@index([tarefa_pai_id])
    @@index([projeto_id, removido_em])
    @@index([tarefa_pai_id, removido_em])
    @@map("tarefa")
}

// end2start  -- > start_time is preceding task max(end_time) + latency (in days)
// start2start  --> start_time is preceding task max(start_time) +  + latency (in days)
// start2end -- > end_time is preceding task preceding task max(start_time) + latencia
// end2end --> end_time is preceding task preceding task max(end_time) + latencia
enum TarefaDependenteTipo {
    termina_pro_inicio
    inicia_pro_inicio
    inicia_pro_termino
    termina_pro_termino
}

model TarefaDependente {
    id Int @id @default(autoincrement())

    tarefa_id             Int
    dependencia_tarefa_id Int

    tipo     TarefaDependenteTipo
    latencia Int

    tarefa             Tarefa @relation("dependencias", fields: [tarefa_id], references: [id])
    tarefas_dependente Tarefa @relation("ref_dependentes", fields: [dependencia_tarefa_id], references: [id])

    @@map("tarefa_dependente")
}

model ProjetoRisco {
    id Int @id @default(autoincrement())

    projeto_id Int
    projeto    Projeto @relation(fields: [projeto_id], references: [id])

    titulo        String   @default("(sem título)")
    codigo        Int
    registrado_em DateTime

    descricao    String?
    causa        String?
    consequencia String?

    probabilidade Int?
    impacto       Int?

    status_risco StatusRisco

    // calculados
    nivel                      Int? // probabilidade * impacto
    grau                       Int? // cada nivel vai dar um grau diferente
    resposta                   String?
    RiscoTarefa                RiscoTarefa[]
    ProjetoAcompanhamentoRisco ProjetoAcompanhamentoRisco[]
    planos_de_acao             PlanoAcao[]

    /// lista de planos de ação sem data de terminimo, populado via trigger
    planos_de_acao_sem_dt_term Int[]

    risco_tarefa_outros String? // String deve ser preenchida caso o user queira informar um "risco_tarefa" que seja de fora do PDM

    removido_em  DateTime?
    removido_por Int?

    criado_em  DateTime
    criado_por Int

    atualizado_em  DateTime?
    atualizado_por Int?

    removedor   Pessoa? @relation("Removedor", fields: [removido_por], references: [id])
    atualizador Pessoa? @relation("Atualizador", fields: [atualizado_por], references: [id])
    criador     Pessoa  @relation("Criador", fields: [criado_por], references: [id])

    @@index([projeto_id])
    @@map("projeto_risco")
}

// de 0 até N tarefas
model RiscoTarefa {
    id Int @id @default(autoincrement())

    tarefa_id Int
    tarefa    Tarefa @relation(fields: [tarefa_id], references: [id])

    projeto_risco_id Int
    risco            ProjetoRisco @relation(fields: [projeto_risco_id], references: [id])

    @@index([tarefa_id])
    @@index([projeto_risco_id])
    @@map("risco_tarefa")
}

model PlanoAcao {
    id Int @id @default(autoincrement())

    projeto_risco_id Int
    projeto_risco    ProjetoRisco @relation(fields: [projeto_risco_id], references: [id])

    contramedida       String
    prazo_contramedida DateTime? @db.Date() // data do termino previsto
    custo              Float?
    custo_percentual   Float? // custo em relacao ao projeto todo, coalesce(custo_real, custo_estimado) -- eu acho

    medidas_de_contingencia String
    orgao_id                Int?
    orgao                   Orgao? @relation(fields: [orgao_id], references: [id])

    responsavel            String?
    PlanoAcaoMonitoramento PlanoAcaoMonitoramento[]

    contato_do_responsavel String?
    data_termino           DateTime? @db.Date()

    removido_em  DateTime?
    removido_por Int?

    criado_em  DateTime
    criado_por Int

    atualizado_em  DateTime?
    atualizado_por Int?

    removedor   Pessoa? @relation("Removedor", fields: [removido_por], references: [id])
    atualizador Pessoa? @relation("Atualizador", fields: [atualizado_por], references: [id])
    criador     Pessoa  @relation("Criador", fields: [criado_por], references: [id])

    @@index([projeto_risco_id])
    @@map("plano_acao")
}

enum StatusRisco {
    SemInformacao
    Aumentando
    Estatico
    Diminuindo
    SobControle
    Fechado
}

// desenhado no MER como Monitoramento_Risco
model PlanoAcaoMonitoramento {
    id Int @id @default(autoincrement())

    plano_acao_id Int
    plano_acao    PlanoAcao @relation(fields: [plano_acao_id], references: [id])

    data_afericao DateTime @db.Date()
    descricao     String

    criado_em  DateTime @default(now()) @db.Timestamptz(6)
    criado_por Int

    ultima_revisao Boolean

    removido_em  DateTime?
    removido_por Int?

    atualizado_em  DateTime?
    atualizado_por Int?

    criador     Pessoa  @relation("Criador", fields: [criado_por], references: [id])
    atualizador Pessoa? @relation("Atualizador", fields: [atualizado_por], references: [id])
    removedor   Pessoa? @relation("Removedor", fields: [removido_por], references: [id])

    @@index([plano_acao_id, data_afericao])
    @@index([plano_acao_id, ultima_revisao])
    @@map("plano_acao_monitoramento")
}

model ProjetoAcompanhamentoItem {
    id Int @id @default(autoincrement())

    projeto_acompanhamento_id Int
    projeto_acompanhamento    ProjetoAcompanhamento @relation(fields: [projeto_acompanhamento_id], references: [id])

    encaminhamento       String?
    responsavel          String?
    prazo_encaminhamento DateTime? @db.Date()
    prazo_realizado      DateTime? @db.Date()

    ordem Int @db.SmallInt

    @@index([projeto_acompanhamento_id])
    @@map("projeto_acompanhamento_item")
}

// durante a fase de EmExecução, a cada 15 dias eles criam esse acompanhamento
model ProjetoAcompanhamento {
    id Int @id @default(autoincrement())

    projeto_id Int
    projeto    Projeto @relation(fields: [projeto_id], references: [id])

    data_registro DateTime @db.Date()
    participantes String
    detalhamento  String?

    observacao          String?
    detalhamento_status String?
    pontos_atencao      String?
    pauta               String?

    cronograma_paralisado Boolean @default(false)

    criado_em  DateTime
    criado_por Int

    atualizado_em  DateTime @default(now())
    atualizado_por Int?

    removido_em                DateTime?
    removido_por               Int?
    ProjetoAcompanhamentoRisco ProjetoAcompanhamentoRisco[]
    ProjetoAcompanhamentoItem  ProjetoAcompanhamentoItem[]

    @@index([projeto_id, data_registro])
    @@map("projeto_acompanhamento")
}

// de 0 até N riscos pro acompanhamento
model ProjetoAcompanhamentoRisco {
    id Int @id @default(autoincrement())

    projeto_risco_id Int
    projeto_risco    ProjetoRisco @relation(fields: [projeto_risco_id], references: [id])

    projeto_acompanhamento_id Int
    projeto_acompanhamento    ProjetoAcompanhamento @relation(fields: [projeto_acompanhamento_id], references: [id])

    @@map("projeto_acompanhamento_risco")
}

model MetabasePermissao {
    id Int @id @default(autoincrement())

    permissao      String
    configuracao   Json   @default("{}") @db.Json
    metabase_url   String
    metabase_token String
    ordem          Int
    titulo         String

    @@map("metabase_permissao")
}

model ImportacaoOrcamento {
    id Int @id @default(autoincrement())

    arquivo_id Int
    arquivo    Arquivo @relation("input", fields: [arquivo_id], references: [id])

    saida_arquivo_id Int?
    saida_arquivo    Arquivo? @relation("output", fields: [saida_arquivo_id], references: [id])

    pdm_id Int?
    pdm    Pdm? @relation(fields: [pdm_id], references: [id])

    portfolio_id Int?
    portfolio    Portfolio? @relation(fields: [portfolio_id], references: [id])

    // required ter um criador, pq é required saber quem subiu os dados
    criado_por Int
    criado_em  DateTime @default(now()) @db.Timestamptz(6)

    congelado_em  DateTime? @db.Timestamptz(6)
    processado_em DateTime? @db.Timestamptz(6)

    processado_errmsg String?

    linhas_importadas Int?
    linhas_recusadas  Int?

    criador Pessoa @relation(fields: [criado_por], references: [id])

    @@index([criado_em, pdm_id])
    @@index([criado_em, portfolio_id])
    @@map("importacao_orcamento")
}
