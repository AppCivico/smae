generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Funcao {
    id               Int                @id @unique @default(autoincrement())
    descricao        String
    timePessoaFuncao TimePessoaFuncao[]
    FuncaoPermissao  FuncaoPermissao[]

    @@map("funcao")
}

model Modulo {
    id        Int         @id @unique @default(autoincrement())
    nome      String
    codigo    String      @unique
    Permissao Permissao[]

    @@map("modulo")
}

model Permissao {
    id              Int               @id @unique @default(autoincrement())
    nome            String
    codigo          String            @unique
    modulo_id       Int
    modulo          Modulo            @relation(fields: [modulo_id], references: [id])
    FuncaoPermissao FuncaoPermissao[]

    @@map("permissao")
}

model FuncaoPermissao {
    funcao_id    Int
    permissao_id Int
    funcao       Funcao    @relation(fields: [funcao_id], references: [id])
    permissao    Permissao @relation(fields: [permissao_id], references: [id])

    @@id([funcao_id, permissao_id])
    @@map("funcao_permissao")
}

model Secretaria {
    id         Int          @id @unique @default(autoincrement())
    sigla      String
    descricao  String?
    TimePessoa TimePessoa[]

    @@map("secretaria")
}

model Time {
    id         Int          @id @unique @default(autoincrement())
    nome       String
    descricao  String?
    timePessoa TimePessoa[]

    @@map("time")
}

model Pessoa {
    id                  Int                 @id @unique @default(autoincrement())
    email               String              @unique
    senha               String
    eh_super_admin      Boolean             @default(false)
    nome_exibicao       String
    nome_completo       String
    atualizado_em       DateTime            @default(now()) @db.Timestamptz(6)
    atualizado_por      Int?
    criado_em           DateTime            @default(now()) @db.Timestamptz(6)
    criado_por          Int?
    qtde_senha_invalida Int                 @default(0)
    senha_atualizada_em DateTime            @default(now()) @db.Timestamptz(6)
    senha_bloqueada     Boolean             @default(false)
    senha_bloqueada_em  DateTime            @default(now()) @db.Timestamptz(6)
    atualizador         Pessoa?             @relation("AtualizadorPessoas", fields: [atualizado_por], references: [id])
    criador             Pessoa?             @relation("CriadorPessoas", fields: [criado_por], references: [id])
    PessoasQueAtualizei Pessoa[]            @relation("AtualizadorPessoas")
    PessoasQueCriei     Pessoa[]            @relation("CriadorPessoas")
    PessoaSessaoAtiva   PessoaSessaoAtiva[]
    timePessoa          TimePessoa[]

    @@map("pessoa")
}

model TimePessoa {
    id               Int                @id @unique @default(autoincrement())
    pessoa_id        Int
    time_id          Int
    secretaria_id    Int
    pessoa           Pessoa             @relation(fields: [pessoa_id], references: [id])
    secretaria       Secretaria         @relation(fields: [secretaria_id], references: [id])
    time             Time               @relation(fields: [time_id], references: [id])
    TimePessoaFuncao TimePessoaFuncao[]

    @@map("time_pessoa")
}

model TimePessoaFuncao {
    id             Int        @id @unique @default(autoincrement())
    funcao_id      Int
    time_pessoa_id Int
    funcao         Funcao     @relation(fields: [funcao_id], references: [id])
    timePessoa     TimePessoa @relation(fields: [time_pessoa_id], references: [id])

    @@map("time_pessoa_funcao")
}

model PessoaSessaoAtiva {
    id        Int    @id @unique @default(autoincrement())
    pessoa_id Int
    pessoa    Pessoa @relation(fields: [pessoa_id], references: [id])

    @@map("pessoa_sessao_ativa")
}

model EmaildbConfig {
    id                       Int                     @id @default(autoincrement())
    from                     String                  @db.VarChar
    template_resolver_class  String                  @db.VarChar(60)
    template_resolver_config Json                    @default("{}") @db.Json
    email_transporter_class  String                  @db.VarChar(60)
    email_transporter_config Json                    @default("{}") @db.Json
    delete_after             Unsupported("interval") @default(dbgenerated("'10 year'::interval"))
    emaildb_queue            EmaildbQueue[]

    @@map("emaildb_config")
}

model EmaildbQueue {
    id             String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
    config_id      Int
    created_at     DateTime      @default(now()) @db.Timestamp(6)
    template       String        @db.VarChar
    to             String        @db.VarChar
    subject        String        @db.VarChar
    variables      Json          @db.Json
    sent           Boolean?
    updated_at     DateTime?     @db.Timestamp(6)
    visible_after  DateTime?     @db.Timestamp(6)
    errmsg         String?       @db.VarChar
    emaildb_config EmaildbConfig @relation(fields: [config_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@map("emaildb_queue")
}
