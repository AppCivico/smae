generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["interactiveTransactions"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Cargo {
    id            Int            @id @unique @default(autoincrement())
    descricao     String?
    pessoa_fisica PessoaFisica[]

    @@map("cargo")
}

model Coordenadoria {
    id            Int            @id @unique @default(autoincrement())
    descricao     String?
    pessoa_fisica PessoaFisica[]

    @@map("coordenadoria")
}

model Departamento {
    id            Int            @id @unique @default(autoincrement())
    descricao     String?
    pessoa_fisica PessoaFisica[]

    @@map("departamento")
}

model DivisaoTecnica {
    id            Int            @id @unique @default(autoincrement())
    descricao     String?
    pessoa_fisica PessoaFisica[]

    @@map("divisao_tecnica")
}

model Pessoa {
    id                  Int                 @id @unique @default(autoincrement())
    email               String              @unique
    senha               String
    nome_exibicao       String
    nome_completo       String
    atualizado_em       DateTime            @default(now()) @db.Timestamptz(6)
    atualizado_por      Int?
    criado_em           DateTime            @default(now()) @db.Timestamptz(6)
    criado_por          Int?
    qtde_senha_invalida Int                 @default(0)
    senha_atualizada_em DateTime            @default(now()) @db.Timestamptz(6)
    senha_bloqueada     Boolean             @default(false)
    senha_bloqueada_em  DateTime            @default(now()) @db.Timestamptz(6)
    desativado          Boolean             @default(false)
    desativado_em       DateTime            @default(now())
    desativado_por      Int?
    pessoa_fisica_id    Int?
    atualizador         Pessoa?             @relation("AtualizadorPessoas", fields: [atualizado_por], references: [id])
    criador             Pessoa?             @relation("CriadorPessoas", fields: [criado_por], references: [id])
    desativador         Pessoa?             @relation("DesativadorPessoas", fields: [desativado_por], references: [id])
    pessoa_fisica       PessoaFisica?       @relation(fields: [pessoa_fisica_id], references: [id])
    PessoasQueAtualizei Pessoa[]            @relation("AtualizadorPessoas")
    PessoasQueCriei     Pessoa[]            @relation("CriadorPessoas")
    PessoasQueDesativei Pessoa[]            @relation("DesativadorPessoas")
    PessoaPerfil        PessoaPerfil[]
    PessoaSessoesAtivas PessoaSessaoAtiva[]

    @@map("pessoa")
}

model Modulo {
    id         Int          @id @default(autoincrement())
    codigo     String?      @unique @db.VarChar
    descricao  String?      @db.VarChar
    privilegio Privilegio[]

    @@map("modulo")
}

model Orgao {
    id            Int            @id @unique @default(autoincrement())
    sigla         String
    descricao     String?
    tipo_orgao_id Int
    tipo_orgao    TipoOrgao      @relation(fields: [tipo_orgao_id], references: [id])
    pessoa_fisica PessoaFisica[]

    @@map("orgao")
}

model PerfilAcesso {
    id                Int                @id @unique @default(autoincrement())
    nome              String             @db.VarChar
    descricao         String?            @db.VarChar
    perfil_privilegio PerfilPrivilegio[]
    pessoa_perfil     PessoaPerfil[]

    @@map("perfil_acesso")
}

model PerfilPrivilegio {
    id               Int          @id @unique @default(autoincrement())
    perfil_acesso_id Int
    privilegios_id   Int
    perfil_acesso    PerfilAcesso @relation(fields: [perfil_acesso_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    privilegio       Privilegio   @relation(fields: [privilegios_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@unique([perfil_acesso_id, privilegios_id])
    @@map("perfil_privilegio")
}

model PessoaFisica {
    id                 Int             @id @unique @default(autoincrement())
    cargo_id           Int
    divisao_tecnica_id Int?
    departamento_id    Int?
    coordenadoria_id   Int
    orgao_id           Int
    cargao             Cargo           @relation(fields: [cargo_id], references: [id])
    coordenadoria      Coordenadoria   @relation(fields: [coordenadoria_id], references: [id])
    departamento       Departamento?   @relation(fields: [departamento_id], references: [id])
    divisao_tecnica    DivisaoTecnica? @relation(fields: [divisao_tecnica_id], references: [id])
    orgao              Orgao           @relation(fields: [orgao_id], references: [id])
    pessoa             Pessoa[]

    @@map("pessoa_fisica")
}

model PessoaPerfil {
    id               Int           @id @default(autoincrement())
    pessoa_id        Int?
    perfil_acesso_id Int?
    perfil_acesso    PerfilAcesso? @relation(fields: [perfil_acesso_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    pessoa           Pessoa?       @relation(fields: [pessoa_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@map("pessoa_perfil")
}

model PessoaSessaoAtiva {
    id        Int    @id @unique @default(autoincrement())
    pessoa_id Int
    pessoa    Pessoa @relation(fields: [pessoa_id], references: [id])

    @@map("pessoa_sessao_ativa")
}

model Privilegio {
    id                Int                @id @default(autoincrement())
    nome              String             @db.VarChar
    codigo            String             @unique @db.VarChar
    modulo_id         Int
    modulo            Modulo             @relation(fields: [modulo_id], references: [id])
    perfil_privilegio PerfilPrivilegio[]

    @@map("privilegio")
}

model TipoOrgao {
    id        Int     @id @unique @default(autoincrement())
    codigo    String
    descricao String
    orgao     Orgao[]

    @@map("tipo_orgao")
}

model EmaildbConfig {
    id                       Int                     @id @default(autoincrement())
    from                     String                  @db.VarChar
    template_resolver_class  String                  @db.VarChar(60)
    template_resolver_config Json                    @default("{}") @db.Json
    email_transporter_class  String                  @db.VarChar(60)
    email_transporter_config Json                    @default("{}") @db.Json
    delete_after             Unsupported("interval") @default(dbgenerated("'10 years'::interval"))
    EmaildbQueue             EmaildbQueue[]

    @@map("emaildb_config")
}

model EmaildbQueue {
    id             String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
    config_id      Int
    created_at     DateTime      @default(now()) @db.Timestamp(6)
    template       String        @db.VarChar
    to             String        @db.VarChar
    subject        String        @db.VarChar
    variables      Json          @db.Json
    sent           Boolean?
    updated_at     DateTime?     @db.Timestamp(6)
    visible_after  DateTime?     @db.Timestamp(6)
    errmsg         String?       @db.VarChar
    emaildb_config EmaildbConfig @relation(fields: [config_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@map("emaildb_queue")
}
